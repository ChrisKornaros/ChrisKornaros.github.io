<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Chris Kornaros</title>
<link>https://chriskornaros.github.io/pages/projects/data_science/data_science.html</link>
<atom:link href="https://chriskornaros.github.io/pages/projects/data_science/data_science.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Fri, 15 Nov 2024 06:00:00 GMT</lastBuildDate>
<item>
  <title>NFL Big Data Bowl 2025</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/projects/data_science/posts/nfl_bowl_2025.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I will add to this later. Currently, this is a rough combination of my early notebooks.</p>
</section>
<section id="ongoing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="ongoing-thoughts">Ongoing Thoughts</h2>
<p>This is the first time I’m adding to a unified document, it’s December 13th, or about 1 month into my project. As of now, Random Forest definitely seems like the best path forward; however, the intial version certainly overfit. I believe the model overfit because some of the <code>plays</code> columns are the pre/post snap home/away team win probability values. In my next iteration, I’m going to remove those values, and in the future I might even try to recreate them. That being said, there’s a little under one month to go, so I’m going to focus on putting together some kind of deliverable/submission, before I go off the deep end. That said, this page and the website in general are going to be sloppy as I figure things out and slowly improve the organization and UI.</p>
</section>
<section id="exploratory-data-analysis-and-initial-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="exploratory-data-analysis-and-initial-thoughts">Exploratory Data Analysis and Initial Thoughts</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This was written on November 26th, 2024. It was later added to this site on December 13th, 2024. This is a general write up on the project, you can see the full notebooks below. The full repo is available <a href="https://www.github.com/ChrisKornaros/NFL_Big_Data_Bowl_2025">here</a>.</p>
</div>
</div>
<p>Currently, I’ve made solid progress with my initial exploratory data analysis and project configuration. Here are some quick notes about the setup of my project environment (from IDE to tools/versions). - Using VS Code with the Jupyter, Jinja, YAML, Quarto (for notes/project submissions), and dbt extensions. - DuckDB is my primary database tool (for now), with dbt for the data modeling - Then, I’m using Python and Jupyter Notebooks for the analysis/ML component</p>
<p>The reason I may switch to PostgreSQL for the primary Database is to just gain experience with DuckDB as a DEV environement and Postgres for PROD. Realistically, however, for the scope of this project DuckDB accomplishes everything I need it to.</p>
<p>For the forseeable future, the only side project I’ll be working on is this, so my next few posts will only look at the project progress and my thoughts about the Big Data Bowl, feel free to checkout the <a href="https://www.github.com/ChrisKornaros/NFL_Big_Data_Bowl_2025">GitHub repository</a> where I’m saving my work.</p>
<p>Some notes about my current project progress: - The project folder has a few subdirectories, including nfl_dbt which is the dbt project folder - The raw data came in the form of 13 CSVs from Kaggle. 4 of which are 50mb or less, 9 of which are ~1gb. - I’m using Databricks’ “Medallion Architecture” to guide my data modeling workflow. - I built the initial dbt models, using DuckDB as the DEV target (enabling 4 threads) and loaded the “bronze” schema which contains the 13 raw tables - I aggregated the data into the “silver” schema, which contains an aggregated play data table - I further aggregated the data into the “gold” schema, which provides basic analytic tables - Currently, I completed an initial analysis using an EDA notebook where I looked at using a LinearRegression and KNN to compare pre-snap play data with play outcomes. - I settled on a KNN model, but I’m only seeing about a 61.1% accuracy rate (confusion matrix and explanation below).</p>
<p>So, I’m at a bit of a crossroads, with a few ways forward. It may be simpler (for the initial project/submission) to build a linear regression model that takes pre-snap play data as features, and then looks at yards gained (or loss) for the output. Conversely, if I stick with the KNN model I’ll need to make some changes. The majority of the outputs are either Gain or Completed, which refer to a positive rushing play and a completed pass, respectively. The issue here, the model overwhelmingly predicts those values, but fails to accurately predict things like Touchdowns, Sacks, or Interceptions.</p>
<p>So, I may need to limit possible play outcomes, or at least combine some categories (i.e.&nbsp;Turnover for Fumble + Interception). Or, add some more presnap data, such as down and distance (I currently only use starting yard line, along with categorical data). If you made it this far, thank you! Below is the confusion matrix output from my current KNN model. I’ll add some hashtags at the end as an experiment too, because I’m not sure if that will help with post discoverability and/or integrate with Bluesky feeds. <img src="https://lionsmane.us-east.host.bsky.network/xrpc/com.atproto.sync.getBlob?did=did%3Aplc%3Aqus4ahqunvgwjssmxcjijwlj&amp;cid=bafkreia2oogirvm2hovmgbn73o5joxxfmce55fuh4x3y7faiw6zxu73gw4" class="img-fluid"></p>
</section>
<section id="knn-classifier-notebook-first-model" class="level2">
<h2 class="anchored" data-anchor-id="knn-classifier-notebook-first-model">KNN Classifier Notebook (First Model)</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import dependencies</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.patches <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpatches</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.neighbors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KNeighborsClassifier</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the connection to the persistent database</span></span>
<span id="cb2-2">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".config/nfl.duckdb"</span>)</span>
<span id="cb2-3">con.close()</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the initial dataframe object with DuckDB</span></span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT *</span></span>
<span id="cb3-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM gold.plays_numeric             </span></span>
<span id="cb3-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>).df()</span>
<span id="cb3-6"></span>
<span id="cb3-7">df.head()</span></code></pre></div>
<div>

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
gameId
</th>
<th>
playId
</th>
<th>
possessionTeam
</th>
<th>
yardlineNumber
</th>
<th>
offenseFormation
</th>
<th>
receiverAlignment
</th>
<th>
playType
</th>
<th>
defensiveFormation
</th>
<th>
pff_manZone
</th>
<th>
yardsGained
</th>
<th>
playOutcome
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
2022102302
</td>
<td>
2655
</td>
<td>
CIN
</td>
<td>
21
</td>
<td>
3
</td>
<td>
8
</td>
<td>
2
</td>
<td>
6
</td>
<td>
2
</td>
<td>
9
</td>
<td>
3
</td>
</tr>
<tr>
<th>
1
</th>
<td>
2022091809
</td>
<td>
3698
</td>
<td>
CIN
</td>
<td>
8
</td>
<td>
3
</td>
<td>
8
</td>
<td>
2
</td>
<td>
13
</td>
<td>
2
</td>
<td>
4
</td>
<td>
3
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2022103004
</td>
<td>
3146
</td>
<td>
HOU
</td>
<td>
20
</td>
<td>
6
</td>
<td>
5
</td>
<td>
2
</td>
<td>
13
</td>
<td>
2
</td>
<td>
6
</td>
<td>
3
</td>
</tr>
<tr>
<th>
3
</th>
<td>
2022110610
</td>
<td>
348
</td>
<td>
KC
</td>
<td>
23
</td>
<td>
6
</td>
<td>
5
</td>
<td>
2
</td>
<td>
13
</td>
<td>
2
</td>
<td>
4
</td>
<td>
3
</td>
</tr>
<tr>
<th>
4
</th>
<td>
2022102700
</td>
<td>
2799
</td>
<td>
BAL
</td>
<td>
27
</td>
<td>
4
</td>
<td>
7
</td>
<td>
1
</td>
<td>
3
</td>
<td>
1
</td>
<td>
-1
</td>
<td>
2
</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the table into features and target</span></span>
<span id="cb4-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT yardlineNumber, offenseFormation, receiverAlignment, playType, defensiveFormation, pff_manZone</span></span>
<span id="cb4-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM gold.plays_numeric</span></span>
<span id="cb4-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>).df()</span>
<span id="cb4-6"></span>
<span id="cb4-7">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT playOutcome</span></span>
<span id="cb4-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM gold.plays_numeric</span></span>
<span id="cb4-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>).df()).ravel()</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape, y.shape)</span></code></pre></div>
<pre><code>(16124, 6) (16124,)</code></pre>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the model and split the datasets into training/testing</span></span>
<span id="cb6-2">knn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KNeighborsClassifier(n_neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb6-3">X_train, X_val, y_train, y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit the model</span></span>
<span id="cb7-2">knn.fit(X_train, y_train)</span></code></pre></div>
<style>#sk-container-id-1 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-1 {
  color: var(--sklearn-color-text);
}

#sk-container-id-1 pre {
  padding: 0;
}

#sk-container-id-1 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-1 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-1 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-1 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-1 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-1 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-1 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-1 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-1 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-1 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-1 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-1 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-1 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-1 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-1 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-1 div.sk-label label.sk-toggleable__label,
#sk-container-id-1 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-1 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-1 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-1 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-1 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-1 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-1 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-1 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-1 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style>
<div id="sk-container-id-1" class="sk-top-container">
<div class="sk-text-repr-fallback">
<pre>KNeighborsClassifier(n_neighbors=7)</pre>
<b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b>
</div>
<div class="sk-container" hidden="">
<div class="sk-item">
<div class="sk-estimator fitted sk-toggleable">
<input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked=""><label for="sk-estimator-id-1" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;KNeighborsClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html">?<span>Documentation for KNeighborsClassifier</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label>
<div class="sk-toggleable__content fitted">
<pre>KNeighborsClassifier(n_neighbors=7)</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic KNN Performance Metrics</span></span>
<span id="cb8-2">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> knn.predict(X_val)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(knn.score(X_val, y_val))</span></code></pre></div>
<pre><code>0.6114096734187681</code></pre>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Datacamp Model performance Loop</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create neighbors</span></span>
<span id="cb10-3">neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span>
<span id="cb10-4">train_accuracies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb10-5">test_accuracies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> neighbors:</span>
<span id="cb10-8">  </span>
<span id="cb10-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up a KNN Classifier</span></span>
<span id="cb10-10">    knn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KNeighborsClassifier(n_neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>neighbor)</span>
<span id="cb10-11">  </span>
<span id="cb10-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;Fit the model</span></span>
<span id="cb10-13">    knn.fit(X_train, y_train)</span>
<span id="cb10-14">  </span>
<span id="cb10-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute accuracy</span></span>
<span id="cb10-16">    train_accuracies[neighbor] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> knn.score(X_train, y_train)</span>
<span id="cb10-17">    test_accuracies[neighbor] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> knn.score(X_val, y_val)</span>
<span id="cb10-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(neighbors, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, train_accuracies, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, test_accuracies)</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize model accuracy with various neighbors</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a title</span></span>
<span id="cb11-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KNN: Varying Number of Neighbors"</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&nbsp;Plot training accuracies</span></span>
<span id="cb11-6">plt.plot(neighbors, train_accuracies.values(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training Accuracy"</span>)</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot test accuracies</span></span>
<span id="cb11-9">plt.plot(neighbors, test_accuracies.values(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Testing Accuracy"</span>)</span>
<span id="cb11-10"></span>
<span id="cb11-11">plt.legend()</span>
<span id="cb11-12">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Neighbors"</span>)</span>
<span id="cb11-13">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy"</span>)</span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb11-16">plt.show()</span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Map the original target variables to the KNN outputs</span></span>
<span id="cb12-2">play_outcome_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT</span></span>
<span id="cb12-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    CASE</span></span>
<span id="cb12-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 1 THEN 'Gain'</span></span>
<span id="cb12-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 2 THEN 'Loss'</span></span>
<span id="cb12-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 3 THEN 'Completed'</span></span>
<span id="cb12-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 4 THEN 'Incomplete'</span></span>
<span id="cb12-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 5 THEN 'Scrambled'</span></span>
<span id="cb12-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 6 THEN 'Touchdown'</span></span>
<span id="cb12-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 7 THEN 'Intercepted'</span></span>
<span id="cb12-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 8 THEN 'Fumbled'</span></span>
<span id="cb12-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 9 THEN 'Sacked'</span></span>
<span id="cb12-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHEN playOutcome = 0 THEN 'Penalty'</span></span>
<span id="cb12-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ELSE 'Unknown'  -- Optional, in case there are values not matching any condition</span></span>
<span id="cb12-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    END AS playOutcome</span></span>
<span id="cb12-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM gold.plays_numeric</span></span>
<span id="cb12-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>).df()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'playOutcome'</span>].tolist()</span>
<span id="cb12-19"></span>
<span id="cb12-20">play_outcome_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.unique(play_outcome_map).tolist()</span></code></pre></div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary to map playOutcome values to corresponding labels</span></span>
<span id="cb13-2">play_outcome_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: play_outcome_map[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(play_outcome_map))}</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a colormap for the string labels (use 'viridis' colormap)</span></span>
<span id="cb13-5">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.cm.viridis(np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(play_outcome_map)))</span>
<span id="cb13-6">play_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(play_outcome_map)), colors))</span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create legend patches for each class label</span></span>
<span id="cb13-9">legend_patches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mpatches.Patch(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>play_colors[i], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>play_outcome_map[i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(play_outcome_map))]</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming `y_pred` is a list of predictions, map numeric predictions to string labels</span></span>
<span id="cb13-12">pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [play_outcome_dict[val] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y_pred]</span></code></pre></div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attempting to conduct sensitivity analysis for feature importance</span></span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> feature <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):</span>
<span id="cb14-3">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb14-4">    plt.scatter(X_val.iloc[:, feature], y_pred, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[play_colors[val] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y_pred], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)</span>
<span id="cb14-5">    plt.xlabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Feature </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>feature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Class"</span>)</span>
<span id="cb14-7">    plt.yticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(play_outcome_map)), play_outcome_map)</span>
<span id="cb14-8">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Predictions by Feature </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>feature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-9">    plt.legend(handles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> legend_patches, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual Class"</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>)</span>
<span id="cb14-10">    plt.tight_layout</span>
<span id="cb14-11">    plt.show()</span></code></pre></div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your play_outcome_dict with correct mapping</span></span>
<span id="cb15-2">play_outcome_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb15-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gain'</span>,</span>
<span id="cb15-4">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>,</span>
<span id="cb15-5">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Completed'</span>,</span>
<span id="cb15-6">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Incomplete'</span>,</span>
<span id="cb15-7">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Scrambled'</span>,</span>
<span id="cb15-8">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Touchdown'</span>,</span>
<span id="cb15-9">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Intercepted'</span>,</span>
<span id="cb15-10">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fumbled'</span>,</span>
<span id="cb15-11">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sacked'</span>,</span>
<span id="cb15-12">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Penalty'</span></span>
<span id="cb15-13">}</span>
<span id="cb15-14"></span>
<span id="cb15-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Map the y_pred values to the corresponding labels</span></span>
<span id="cb15-16">pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [play_outcome_dict[val] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y_pred]</span>
<span id="cb15-17"></span>
<span id="cb15-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the colormap based on the labels</span></span>
<span id="cb15-19">play_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.cm.viridis(np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(play_outcome_dict)))</span>
<span id="cb15-20"></span>
<span id="cb15-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine your features (X_val) and the predictions (y_pred) into a single DataFrame</span></span>
<span id="cb15-22">df_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_val.copy()</span>
<span id="cb15-23">df_features[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Class'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [play_outcome_dict[key] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y_pred]</span>
<span id="cb15-24"></span>
<span id="cb15-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a pairplot to visualize pairwise relationships between all features</span></span>
<span id="cb15-26">sns.pairplot(df_features, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted Class'</span>, palette<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(play_outcome_dict.values(), play_colors)), markers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>)</span>
<span id="cb15-27"></span>
<span id="cb15-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Customize the plot</span></span>
<span id="cb15-29">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pairplot of Features Colored by Predicted Class'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>)</span>
<span id="cb15-30">plt.legend(handles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> legend_patches, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual Class"</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>)</span>
<span id="cb15-31">plt.tight_layout()</span>
<span id="cb15-32">plt.show()</span></code></pre></div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> confusion_matrix, ConfusionMatrixDisplay</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming y_true contains the true labels and y_pred contains the predicted labels</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Map numerical values to their respective class labels</span></span>
<span id="cb16-5">y_true_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [play_outcome_dict[val] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y_val]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace y_true with your actual true labels</span></span>
<span id="cb16-6">y_pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [play_outcome_dict[val] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y_pred]</span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the confusion matrix</span></span>
<span id="cb16-9">cm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_true_labels, y_pred_labels, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(play_outcome_dict.values()))</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the confusion matrix</span></span>
<span id="cb16-12">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb16-13">disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay(confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cm, display_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(play_outcome_dict.values()))</span>
<span id="cb16-14">disp.plot(cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, xticks_rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb16-15"></span>
<span id="cb16-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Customize the plot</span></span>
<span id="cb16-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confusion Matrix of KNN Model"</span>)</span>
<span id="cb16-18">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_science/posts/images/knn_13_0.png" class="img-fluid figure-img"></p>
<figcaption>KNN Classifier Confusion Matrix</figcaption>
</figure>
</div>
</section>
<section id="linear-regression-notebook-second-model" class="level2">
<h2 class="anchored" data-anchor-id="linear-regression-notebook-second-model">Linear Regression Notebook (Second Model)</h2>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb17-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb17-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb17-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression, Ridge</span>
<span id="cb17-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split, KFold, cross_val_score</span>
<span id="cb17-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mean_squared_error, r2_score</span></code></pre></div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the DuckDB connection, to the persistent database</span></span>
<span id="cb18-2">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".config/nfl.duckdb"</span>)</span>
<span id="cb18-3">con.close()</span></code></pre></div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test converting the play outcomes to just yards gained or lost</span></span>
<span id="cb19-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb19-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT *</span></span>
<span id="cb19-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM gold.plays_numeric   </span></span>
<span id="cb19-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Can still utilize plays_numeric, just won't use the categorical outcomes as the target</span></span>
<span id="cb20-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT yardlineNumber, offenseFormation, receiverAlignment, playType, defensiveFormation, pff_manZone</span></span>
<span id="cb20-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM gold.plays_numeric   </span></span>
<span id="cb20-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>).df()</span>
<span id="cb20-6">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT yardsGained</span></span>
<span id="cb20-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM gold.plays_numeric   </span></span>
<span id="cb20-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>).df()</span></code></pre></div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train test split</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># May need to come back and apply a Standard Scaler later</span></span>
<span id="cb21-3"></span>
<span id="cb21-4">linreg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression()</span>
<span id="cb21-5">scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb21-6">X_train, X_val, y_train, y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, train_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb21-7"></span>
<span id="cb21-8">X_train_scaled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.fit_transform(X_train)</span>
<span id="cb21-9">X_val_scaled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.transform(X_val)</span></code></pre></div>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit the model</span></span>
<span id="cb22-2">linreg.fit(X_train_scaled, y_train)</span></code></pre></div>
<style>#sk-container-id-3 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-3 {
  color: var(--sklearn-color-text);
}

#sk-container-id-3 pre {
  padding: 0;
}

#sk-container-id-3 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-3 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-3 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-3 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-3 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-3 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-3 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-3 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-3 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-3 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-3 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-3 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-3 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-3 div.sk-label label.sk-toggleable__label,
#sk-container-id-3 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-3 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-3 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-3 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-3 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-3 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-3 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-3 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-3 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style>
<div id="sk-container-id-3" class="sk-top-container">
<div class="sk-text-repr-fallback">
<pre>LinearRegression()</pre>
<b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b>
</div>
<div class="sk-container" hidden="">
<div class="sk-item">
<div class="sk-estimator fitted sk-toggleable">
<input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" checked=""><label for="sk-estimator-id-3" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;LinearRegression<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html">?<span>Documentation for LinearRegression</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label>
<div class="sk-toggleable__content fitted">
<pre>LinearRegression()</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Begin testing and scoring</span></span>
<span id="cb23-2">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linreg.predict(X_val_scaled)</span>
<span id="cb23-3"></span>
<span id="cb23-4">mse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_squared_error(y_val, y_pred)</span>
<span id="cb23-5">r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r2_score(y_val, y_pred)</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"R2 Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>r2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre><code>MSE: 80.63310622289697
R2 Score: 0.02277208083008464</code></pre>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">plt.scatter(y_val, y_pred)</span>
<span id="cb25-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual Values"</span>)</span>
<span id="cb25-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Values"</span>)</span>
<span id="cb25-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linear Regression: Actual vs Predicted"</span>)</span>
<span id="cb25-5">plt.show()</span>
<span id="cb25-6"></span>
<span id="cb25-7">coefficients <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linreg.coef_</span>
<span id="cb25-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Coefficients: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>coefficients<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_science/posts/images/linreg_7_0.png" class="img-fluid figure-img"></p>
<figcaption>Linear Regression Scatter Plot</figcaption>
</figure>
</div>
<pre><code>Coefficients: [[ 0.05041481  0.32550574  0.04088819  1.77381568 -0.0198335  -0.16104852]]</code></pre>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">ridge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ridge(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb27-2">ridge.fit(X_train_scaled, y_train)</span>
<span id="cb27-3">y_pred_ridge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ridge.predict(X_val_scaled)</span>
<span id="cb27-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Ridge MSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean_squared_error(y_val, y_pred_ridge)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre><code>Ridge MSE: 80.63311884052399</code></pre>
</section>
<section id="random-forest-notebook-third-model" class="level2">
<h2 class="anchored" data-anchor-id="random-forest-notebook-third-model">Random Forest Notebook (Third Model)</h2>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb29-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb29-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb29-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.feature_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RFE</span>
<span id="cb29-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestRegressor</span>
<span id="cb29-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split, GridSearchCV, cross_val_score</span>
<span id="cb29-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mean_squared_error, r2_score</span></code></pre></div>
<pre><code># Create the database connection
con = duckdb.connect("nfl.duckdb")
#con.close()</code></pre>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating dataframes with DuckDB, plays and player_play both have 50 columns, more ideal for a broad random forest</span></span>
<span id="cb31-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT quarter, down, yardsToGo, yardlineNumber, preSnapHomeScore, preSnapVisitorScore,</span></span>
<span id="cb31-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    playNullifiedByPenalty, absoluteYardlineNumber, preSnapHomeTeamWinProbability, preSnapVisitorTeamWinProbability, expectedPoints,</span></span>
<span id="cb31-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    passResult_complete, passResult_incomplete, passResult_sack, passResult_interception, passResult_scramble, passLength, targetX, targetY,</span></span>
<span id="cb31-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    playAction, passTippedAtLine, unblockedPressure, qbSpike, qbKneel, qbSneak, penaltyYards, prePenaltyYardsGained, </span></span>
<span id="cb31-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    homeTeamWinProbabilityAdded, visitorTeamWinProbilityAdded, expectedPointsAdded, isDropback, timeToThrow, timeInTackleBox, timeToSack,</span></span>
<span id="cb31-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    dropbackDistance, pff_runPassOption, playClockAtSnap, pff_manZone, pff_runConceptPrimary_num, pff_passCoverage_num, pff_runConceptSecondary_num</span></span>
<span id="cb31-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM silver.plays_rf</span></span>
<span id="cb31-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>).df()</span>
<span id="cb31-11">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT yardsGained</span></span>
<span id="cb31-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM silver.plays_rf</span></span>
<span id="cb31-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>).df()).ravel()</span></code></pre></div>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Having issues with NA values, the below code does a simple count using pandas, will then go back and change the query</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># As of writing this, the issue is solved; however, the dbt model for this is far from efficient</span></span>
<span id="cb32-3">na_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb32-4"></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optionally, filter only columns with 'NA' values for easier review</span></span>
<span id="cb32-6">na_counts_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> na_counts[na_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb32-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(na_counts_filtered, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, X.shape, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, y.shape) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># playClockAtSnap has only 1 NA value, will just drop that row</span></span></code></pre></div>
<pre><code>Series([], dtype: int64) 
 (16124, 41) 
 (16124,)</code></pre>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the model and split the data</span></span>
<span id="cb34-2">rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestRegressor(warm_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb34-3"></span>
<span id="cb34-4">selector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RFE(rf, n_features_to_select<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb34-5">X_selected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> selector.fit_transform(X, y)</span></code></pre></div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Begin Interpretation, first with feature importance</span></span>
<span id="cb35-2">selected_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.columns[selector.support_]</span>
<span id="cb35-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(selected_features)</span></code></pre></div>
<pre><code>Index(['yardlineNumber', 'absoluteYardlineNumber',
       'preSnapHomeTeamWinProbability', 'expectedPoints',
       'passResult_scramble', 'penaltyYards', 'prePenaltyYardsGained',
       'homeTeamWinProbabilityAdded', 'visitorTeamWinProbilityAdded',
       'expectedPointsAdded'],
      dtype='object')</code></pre>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the data</span></span>
<span id="cb37-2">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X_selected, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb37-3"></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train the model</span></span>
<span id="cb37-5">rf.fit(X_train, y_train)</span>
<span id="cb37-6"></span>
<span id="cb37-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make predictions</span></span>
<span id="cb37-8">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf.predict(X_test)</span>
<span id="cb37-9"></span>
<span id="cb37-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate scores</span></span>
<span id="cb37-11">mse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_squared_error(y_test, y_pred)</span>
<span id="cb37-12">r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r2_score(y_test, y_pred)</span>
<span id="cb37-13"></span>
<span id="cb37-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Mean Squared Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb37-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"R^2 Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>r2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre><code>Mean Squared Error: 1.7769936744186046
R^2 Score: 0.9766614590863065</code></pre>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Continue with the GridSearch</span></span>
<span id="cb39-2">param_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb39-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_estimators'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>],</span>
<span id="cb39-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_depth'</span>: [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>],</span>
<span id="cb39-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_samples_split'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>],</span>
<span id="cb39-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_samples_leaf'</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb39-7">}</span>
<span id="cb39-8"></span>
<span id="cb39-9">grid_search <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GridSearchCV(estimator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rf, param_grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>param_grid, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'neg_mean_squared_error'</span>, n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb39-10">grid_search.fit(X_train, y_train)</span>
<span id="cb39-11">best_rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_search.best_estimator_</span>
<span id="cb39-12"></span>
<span id="cb39-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrap a progress bar for longer Grid Searches</span></span>
<span id="cb39-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""with tqdm(total=len(param_grid['n_estimators']) * len(param_grid['max_depth']) * len(param_grid['min_samples_split']) * len(param_grid['min_samples_leaf']), desc="GridSearch Progress") as pbar:</span></span>
<span id="cb39-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def callback(*args, **kwargs):</span></span>
<span id="cb39-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pbar.update(1)</span></span>
<span id="cb39-17"></span>
<span id="cb39-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # Add the callback to the grid search</span></span>
<span id="cb39-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    grid_search.fit(X, y, callback=callback)"""</span></span>
<span id="cb39-20"></span>
<span id="cb39-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(grid_search.best_params_)</span></code></pre></div>
<pre><code>{'max_depth': 20, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}</code></pre>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Continue with the Cross Validation Score</span></span>
<span id="cb41-2">cv_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_val_score(rf, X_selected, y, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'neg_mean_squared_error'</span>)</span>
<span id="cb41-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cross-validated MSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cv_scores<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre><code>Cross-validated MSE: 1.9303851017196607</code></pre>


</section>

 ]]></description>
  <category>Research</category>
  <category>Ongoing</category>
  <guid>https://chriskornaros.github.io/pages/projects/data_science/posts/nfl_bowl_2025.html</guid>
  <pubDate>Fri, 15 Nov 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Titanic Disaster</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/projects/data_science/posts/titanic.html</link>
  <description><![CDATA[ 




<section id="general-overview" class="level2">
<h2 class="anchored" data-anchor-id="general-overview">General Overview</h2>
<p>The Kaggle Titanic dataset and ML competition is one that many people are familiar with, and if they’re like me, it was also their first ML project. I redid this after 3 years to get familiar with my current workflow of using git, notebooks, venvs, etc. Below I included some notes to myself. While it was overkill, I used a Dockerized environment for this project, just to increase my familiarity with containers and the docker toolset.</p>
</section>
<section id="notes-on-the-titanic-model-and-the-process-for-using-the-jupyter-kernel-on-the-ec2-server" class="level2">
<h2 class="anchored" data-anchor-id="notes-on-the-titanic-model-and-the-process-for-using-the-jupyter-kernel-on-the-ec2-server">Notes on the Titanic model and the process for using the Jupyter Kernel on the EC2 Server</h2>
<div>
<ol type="1">
<li>First, navigate to Local-Scripts/.AWS/.EC2_Scripts and run the ec2_start.sh script <code>zsh ec2_start.sh</code></li>
<li>Next, execute the unix_test_dns.sh script to store the EC2 public DNS in the /etc/hosts file <code>./unix_test_dns.sh</code></li>
<li>Use the ssh -i command to connect to the EC2 server, then run the Jupyter kernel image <code>docker run -p 8888:8888 titanic-env</code> <strong>Look into adding a volume mount command here to persist model/file changes in the EC2</strong></li>
<li>Now that it’s running. Use a different terminal window (or the VS Code IDE) and test the DNS name. <code>ping unix_test.local</code> <strong>Need to make this DNS dynamic</strong></li>
<li>In VS Code, open the .ipynb file in the model folder and continue work.
<ol type="1">
<li>If you need to reconnect to a kernel, use the Titanic preset.</li>
<li>VS Code connects to the EC2 IPv4 address, even though the Kernel tells you 127.0.0.1</li>
</ol></li>
<li>The format for connecting to the Public IPv4 is <code>http://IPv4:8888/</code></li>
<li>To pull the file out of the container and store it on the EC2 server
<ol type="1">
<li><code>docker cp 786853360d97:/home/files/titanic_submission.csv files/titanic_submission.csv</code></li>
<li>docker copy <code>instance-id</code>:<code>/path/to/file</code> <code>local/path</code></li>
</ol></li>
</ol>
</div>
<section id="if-you-need-to-modify-the-container" class="level3">
<h3 class="anchored" data-anchor-id="if-you-need-to-modify-the-container">If you need to modify the container</h3>
<ul>
<li>Do so locally, or anywhere, and then push the change to the GitHub repoistory</li>
<li>Then, pull the changes into the EC2 server</li>
<li>Clear the Docker library/cache, and then rebuild the image from scratch, use the following <code>docker build -t titanic-env -f .config/Dockerfile .</code></li>
<li>Ensure this is done from the main project folder and uses those flags
<ul>
<li>For Titanic, this is in the admin/Kaggle/Titanic folder in the EC2 instance</li>
<li><code>--no-cache</code> ensures it’s a fresh build (This will take a while, not worth it in the smaller environment. Rebuild with cache)</li>
<li><code>-t</code> sets the name of the image</li>
<li><code>-f</code> lets you specify the Dockerfile location</li>
<li><code>.</code> lets Docker know that your current working directory is where the build context should take place</li>
</ul></li>
</ul>
</section>
</section>
<section id="the-code-portion-of-this-notebook" class="level2">
<h2 class="anchored" data-anchor-id="the-code-portion-of-this-notebook">The Code Portion of this notebook</h2>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Caution
</div>
</div>
<div class="callout-body-container callout-body">
<p>When I most recently completed this competition, I didn’t do it with the goal in mind of doing a nice write-up. This is really just an amalgamation of the notes I made to myself on how to use/modify the Docker container I ran my model on and the actual notebook + code + notes.</p>
</div>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split, KFold, RandomizedSearchCV</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> confusion_matrix, classification_report, roc_auc_score</span>
<span id="cb1-8"></span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a connection and create a persistent database</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Worth noting that due to the workflow I'm using, the database was/should be created externally, and then built into the Docker container</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This way, the raw database files are saved locally, but file size won't grow exponentially</span></span>
<span id="cb2-4">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"files/titanic.duckdb"</span>)</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using this to DROP and Recreate train_raw, ensuring a fresh process</span></span>
<span id="cb3-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DROP TABLE train_raw;"</span>)</span>
<span id="cb3-3">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DROP TABLE test_raw;"</span>)</span>
<span id="cb3-4">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREATE TABLE train_raw AS SELECT * FROM 'files/train.csv'"</span>)</span>
<span id="cb3-5">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREATE TABLE test_raw AS SELECT * FROM 'files/test.csv'"</span>)</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create working tables</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#con.sql("DROP TABLE train;")</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#con.sql("DROP TABLE test;")</span></span>
<span id="cb4-4">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREATE TABLE train AS SELECT * FROM train_raw"</span>)</span>
<span id="cb4-5">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREATE TABLE test AS SELECT * FROM test_raw"</span>)</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify the proper tables are loaded</span></span>
<span id="cb5-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM duckdb_tables()"</span>)</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate summary statistics</span></span>
<span id="cb6-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SUMMARIZE train"</span>)</span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#con.sql("SUMMARIZE test")</span></span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Examine Nulls for the Age, Cabin, and Embarked columns (do this for test as well)</span></span>
<span id="cb7-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM train WHERE Age IS NULL"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Seems to make the most sense to use the average age here</span></span>
<span id="cb7-3">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM train WHERE Cabin IS NULL"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Seems likely Cabins not as strictly recorded for lower class guests, probably unnecessary for model</span></span>
<span id="cb7-4">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM train WHERE Embarked IS NULL"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This only comprises 2 records and it's unclear if they made it on in the first place, not a high enough percentage of 1st class survivors to consider keeping</span></span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the Age column, replace NULL values with the average Age</span></span>
<span id="cb8-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""UPDATE train AS train_clean</span></span>
<span id="cb8-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        SET Age = (</span></span>
<span id="cb8-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            SELECT</span></span>
<span id="cb8-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                avg(raw.Age) AS cleanAge</span></span>
<span id="cb8-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            FROM train as raw</span></span>
<span id="cb8-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHERE raw.Age IS NOT NULL</span></span>
<span id="cb8-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb8-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHERE Age IS NULL"""</span>)</span></code></pre></div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the Sex column, change the VARCHAR type to BOOLEAN</span></span>
<span id="cb9-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""ALTER TABLE train ALTER Sex </span></span>
<span id="cb9-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        SET DATA TYPE BOOLEAN USING CASE</span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHEN Sex = 'female' THEN 1 ELSE 0 END</span></span>
<span id="cb9-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        """</span>)</span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the Age column in the test dataset</span></span>
<span id="cb10-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""UPDATE test AS test_clean</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        SET Age = (</span></span>
<span id="cb10-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            SELECT</span></span>
<span id="cb10-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                avg(raw.Age) AS cleanAge</span></span>
<span id="cb10-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            FROM test as raw</span></span>
<span id="cb10-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHERE raw.Age IS NOT NULL</span></span>
<span id="cb10-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb10-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHERE Age IS NULL"""</span>)</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the Sex column, change the VARCHAR type to BOOLEAN</span></span>
<span id="cb11-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""ALTER TABLE test ALTER Sex </span></span>
<span id="cb11-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        SET DATA TYPE BOOLEAN USING CASE</span></span>
<span id="cb11-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHEN Sex = 'female' THEN 1 ELSE 0 END</span></span>
<span id="cb11-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        """</span>)</span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the PassengerId, Name, Cabin, Embarked, Fare, and Ticket columns</span></span>
<span id="cb12-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE train DROP PassengerId"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Has no bearing on the outcome of the model</span></span>
<span id="cb12-3">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE train DROP Name"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Has to be numeric data</span></span>
<span id="cb12-4">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE train DROP Cabin"</span>)</span>
<span id="cb12-5">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE train DROP Embarked"</span>)</span>
<span id="cb12-6">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE train DROP Fare"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropping because there are nulls in the test file</span></span>
<span id="cb12-7">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE train DROP Ticket"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropping because of inconsistent values</span></span>
<span id="cb12-8"></span></code></pre></div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the PassengerId, Name, Cabin, Embarked, Fare, and Ticket columns</span></span>
<span id="cb13-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE test DROP Name"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Has to be numeric data</span></span>
<span id="cb13-3">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE test DROP Cabin"</span>)</span>
<span id="cb13-4">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE test DROP Embarked"</span>)</span>
<span id="cb13-5">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE test DROP Fare"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropping because there are nulls in the test file</span></span>
<span id="cb13-6">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALTER TABLE test DROP Ticket"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropping because of inconsistent values</span></span>
<span id="cb13-7"></span></code></pre></div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating dataframes for testing/training, I'll be using sklearn here, which needs both</span></span>
<span id="cb14-2">train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM train"</span>).df()</span>
<span id="cb14-3">test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM test"</span>).df()</span></code></pre></div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create features and target</span></span>
<span id="cb15-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survived"</span>, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).values</span>
<span id="cb15-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Survived"</span>].values</span>
<span id="cb15-4"></span>
<span id="cb15-5">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PassengerId"</span>, axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).values</span></code></pre></div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize Regression object and split data</span></span>
<span id="cb16-2">logreg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression(penalty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l2'</span>, tol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.float64(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.083425</span>), C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.float64(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.43061224489795924</span>), class_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balanced'</span>)</span>
<span id="cb16-3">X_train, X_val, y_train, y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit and predict</span></span>
<span id="cb17-2">logreg.fit(X_train, y_train)</span></code></pre></div>
<style>#sk-container-id-5 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-5 {
  color: var(--sklearn-color-text);
}

#sk-container-id-5 pre {
  padding: 0;
}

#sk-container-id-5 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-5 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-5 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-5 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-5 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-5 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-5 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-5 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-5 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-5 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-5 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-5 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-5 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-5 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-5 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-5 div.sk-label label.sk-toggleable__label,
#sk-container-id-5 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-5 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-5 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-5 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-5 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-5 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-5 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-5 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-5 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-5 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-5 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style>
<div id="sk-container-id-5" class="sk-top-container">
<div class="sk-text-repr-fallback">
<pre>LogisticRegression(C=np.float64(0.43061224489795924), class_weight='balanced',
                   tol=np.float64(0.083425))</pre>
<b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b>
</div>
<div class="sk-container" hidden="">
<div class="sk-item">
<div class="sk-estimator fitted sk-toggleable">
<input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" checked=""><label for="sk-estimator-id-5" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;LogisticRegression<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html">?<span>Documentation for LogisticRegression</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label>
<div class="sk-toggleable__content fitted">
<pre>LogisticRegression(C=np.float64(0.43061224489795924), class_weight='balanced',
                   tol=np.float64(0.083425))</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict and measure output</span></span>
<span id="cb18-2">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logreg.predict(X_val)</span>
<span id="cb18-3">y_pred_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logreg.predict_proba(X_val)[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(roc_auc_score(y_val, y_pred_probs))</span></code></pre></div>
<pre><code>0.8149262043998886</code></pre>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Parameter Dictionary for Model Tuning</span></span>
<span id="cb20-2">kf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KFold(n_splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, shuffle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb20-3">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb20-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penalty"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l2"</span>],</span>
<span id="cb20-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tol"</span>: np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>),</span>
<span id="cb20-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>: np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb20-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_weight"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>}]</span>
<span id="cb20-8">}</span>
<span id="cb20-9">logreg_cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(logreg, params, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kf)</span></code></pre></div>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the parameter search, fit the object, print the output</span></span>
<span id="cb21-2">logreg_cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(logreg, params, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kf)</span>
<span id="cb21-3">logreg_cv.fit(X_train, y_train)</span>
<span id="cb21-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuned Logistic Regression Parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(logreg_cv.best_params_))</span>
<span id="cb21-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tuned Logistic Regression Best Accuracy Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(logreg_cv.best_score_))</span></code></pre></div>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the model to the test set</span></span>
<span id="cb22-2">predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logreg.predict(X_test)</span>
<span id="cb22-3"></span>
<span id="cb22-4">submission <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb22-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PassengerId'</span>: test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PassengerId'</span>],</span>
<span id="cb22-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survived'</span>: predictions</span>
<span id="cb22-7">})</span>
<span id="cb22-8"></span>
<span id="cb22-9">submission.head()</span></code></pre></div>
<div>

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
PassengerId
</th>
<th>
Survived
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
892
</td>
<td>
0
</td>
</tr>
<tr>
<th>
1
</th>
<td>
893
</td>
<td>
1
</td>
</tr>
<tr>
<th>
2
</th>
<td>
894
</td>
<td>
0
</td>
</tr>
<tr>
<th>
3
</th>
<td>
895
</td>
<td>
0
</td>
</tr>
<tr>
<th>
4
</th>
<td>
896
</td>
<td>
1
</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write the file to .csv and submit</span></span>
<span id="cb23-2">con.sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM submission"</span>).write_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"files/titanic_submission.csv"</span>)</span></code></pre></div>


</section>

 ]]></description>
  <category>Kaggle</category>
  <category>Completed</category>
  <guid>https://chriskornaros.github.io/pages/projects/data_science/posts/titanic.html</guid>
  <pubDate>Tue, 15 Oct 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Gym Market Analysis</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/projects/data_science/posts/gym_market.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_science/posts/images/gym.png" class="img-fluid figure-img"></p>
<figcaption>gym</figcaption>
</figure>
</div>
<p>You are a product manager for a fitness studio and are interested in understanding the current demand for digital fitness classes. You plan to conduct a market analysis in Python to gauge demand and identify potential areas for growth of digital products and services.</p>
<section id="the-data" class="level3">
<h3 class="anchored" data-anchor-id="the-data">The Data</h3>
<p>You are provided with a number of CSV files in the “Files/data” folder, which offer international and national-level data on Google Trends keyword searches related to fitness and related products.</p>
</section>
<section id="workout.csv" class="level3">
<h3 class="anchored" data-anchor-id="workout.csv">workout.csv</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 31%">
<col style="width: 68%">
</colgroup>
<thead>
<tr class="header">
<th>Column</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>'month'</code></td>
<td>Month when the data was measured.</td>
</tr>
<tr class="even">
<td><code>'workout_worldwide'</code></td>
<td>Index representing the popularity of the keyword ‘workout’, on a scale of 0 to 100.</td>
</tr>
</tbody>
</table>
</section>
<section id="three_keywords.csv" class="level3">
<h3 class="anchored" data-anchor-id="three_keywords.csv">three_keywords.csv</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 31%">
<col style="width: 68%">
</colgroup>
<thead>
<tr class="header">
<th>Column</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>'month'</code></td>
<td>Month when the data was measured.</td>
</tr>
<tr class="even">
<td><code>'home_workout_worldwide'</code></td>
<td>Index representing the popularity of the keyword ‘home workout’, on a scale of 0 to 100.</td>
</tr>
<tr class="odd">
<td><code>'gym_workout_worldwide'</code></td>
<td>Index representing the popularity of the keyword ‘gym workout’, on a scale of 0 to 100.</td>
</tr>
<tr class="even">
<td><code>'home_gym_worldwide'</code></td>
<td>Index representing the popularity of the keyword ‘home gym’, on a scale of 0 to 100.</td>
</tr>
</tbody>
</table>
</section>
<section id="workout_geo.csv" class="level3">
<h3 class="anchored" data-anchor-id="workout_geo.csv">workout_geo.csv</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 31%">
<col style="width: 68%">
</colgroup>
<thead>
<tr class="header">
<th>Column</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>'country'</code></td>
<td>Country where the data was measured.</td>
</tr>
<tr class="even">
<td><code>'workout_2018_2023'</code></td>
<td>Index representing the popularity of the keyword ‘workout’ during the 5 year period.</td>
</tr>
</tbody>
</table>
</section>
<section id="three_keywords_geo.csv" class="level3">
<h3 class="anchored" data-anchor-id="three_keywords_geo.csv">three_keywords_geo.csv</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 31%">
<col style="width: 68%">
</colgroup>
<thead>
<tr class="header">
<th>Column</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>'country'</code></td>
<td>Country where the data was measured.</td>
</tr>
<tr class="even">
<td><code>'home_workout_2018_2023'</code></td>
<td>Index representing the popularity of the keyword ‘home workout’ during the 5 year period.</td>
</tr>
<tr class="odd">
<td><code>'gym_workout_2018_2023'</code></td>
<td>Index representing the popularity of the keyword ‘gym workout’ during the 5 year period.</td>
</tr>
<tr class="even">
<td><code>'home_gym_2018_2023'</code></td>
<td>Index representing the popularity of the keyword ‘home gym’ during the 5 year period.</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the necessary libraries</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start coding here</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"></span>
<span id="cb2-4">workout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/workout.csv'</span>)</span>
<span id="cb2-5">three_kw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/three_keywords.csv'</span>)</span>
<span id="cb2-6">workout_geo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/workout_geo.csv'</span>)</span>
<span id="cb2-7">kw_geo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/three_keywords_geo.csv'</span>)</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">workout.head()</span></code></pre></div>
<div>

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
month
</th>
<th>
workout_worldwide
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
2018-03
</td>
<td>
59
</td>
</tr>
<tr>
<th>
1
</th>
<td>
2018-04
</td>
<td>
61
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2018-05
</td>
<td>
57
</td>
</tr>
<tr>
<th>
3
</th>
<td>
2018-06
</td>
<td>
56
</td>
</tr>
<tr>
<th>
4
</th>
<td>
2018-07
</td>
<td>
51
</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">peak <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> workout.loc[workout[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'workout_worldwide'</span>].idxmax()]</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">year_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> peak.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-2">year_str</span></code></pre></div>
<pre><code>'2020'</code></pre>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">workout.dtypes</span></code></pre></div>
<pre><code>month                object
workout_worldwide     int64
dtype: object</code></pre>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">covid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> workout.loc[(workout[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019-12'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (workout[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-12'</span>)]</span>
<span id="cb9-2">post_covid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> workout.loc[workout[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-12'</span>]</span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">peak_covid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> three_kw.loc[(workout[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019-12'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (workout[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-12'</span>)][[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'home_workout_worldwide'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gym_workout_worldwide'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'home_gym_worldwide'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().idxmax()</span>
<span id="cb10-2">current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> three_kw.loc[workout[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-12'</span>][[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'home_workout_worldwide'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gym_workout_worldwide'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'home_gym_worldwide'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().idxmax()</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">peak_covid</span>
<span id="cb11-2">current</span></code></pre></div>
<pre><code>'gym_workout_worldwide'</code></pre>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">top_country <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> workout_geo.loc[workout_geo[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'workout_2018_2023'</span>].idxmax()][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'country'</span>]</span>
<span id="cb13-2">top_country</span></code></pre></div>
<pre><code>'United States'</code></pre>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">kw_geo1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kw_geo.loc[(kw_geo[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Philippines'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (kw_geo[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Malaysia'</span>)]</span>
<span id="cb15-2">kw_geo1</span></code></pre></div>
<div>

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Country
</th>
<th>
home_workout_2018_2023
</th>
<th>
gym_workout_2018_2023
</th>
<th>
home_gym_2018_2023
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
23
</th>
<td>
Philippines
</td>
<td>
52.0
</td>
<td>
38.0
</td>
<td>
10.0
</td>
</tr>
<tr>
<th>
61
</th>
<td>
Malaysia
</td>
<td>
47.0
</td>
<td>
38.0
</td>
<td>
15.0
</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">home_workout_geo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kw_geo1.loc[kw_geo1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'home_workout_2018_2023'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> kw_geo1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'home_workout_2018_2023'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">home_workout_geo</span></code></pre></div>
<pre><code>'Philippines'</code></pre>


</section>

 ]]></description>
  <category>DataCamp</category>
  <category>Completed</category>
  <guid>https://chriskornaros.github.io/pages/projects/data_science/posts/gym_market.html</guid>
  <pubDate>Mon, 30 Sep 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Netflix Movies</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/projects/data_science/posts/netflix.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_science/posts/images/redpopcorn.jpg" class="img-fluid figure-img"></p>
<figcaption>Movie popcorn on red background</figcaption>
</figure>
</div>
<p><strong>Netflix</strong>! What started in 1997 as a DVD rental service has since exploded into one of the largest entertainment and media companies.</p>
<p>Given the large number of movies and series available on the platform, it is a perfect opportunity to flex your exploratory data analysis skills and dive into the entertainment industry. Our friend has also been brushing up on their Python skills and has taken a first crack at a CSV file containing Netflix data. They believe that the average duration of movies has been declining. Using your friends initial research, you’ll delve into the Netflix data to see if you can determine whether movie lengths are actually getting shorter and explain some of the contributing factors, if any.</p>
<p>You have been supplied with the dataset <code>netflix_data.csv</code> , along with the following table detailing the column names and descriptions. This data does contain null values and some outliers, but handling these is out of scope for the project. Feel free to experiment after submitting!</p>
<section id="the-data" class="level2">
<h2 class="anchored" data-anchor-id="the-data">The data</h2>
<section id="netflix_data.csv" class="level3">
<h3 class="anchored" data-anchor-id="netflix_data.csv"><strong>netflix_data.csv</strong></h3>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Column</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>show_id</code></td>
<td>The ID of the show</td>
</tr>
<tr class="even">
<td><code>type</code></td>
<td>Type of show</td>
</tr>
<tr class="odd">
<td><code>title</code></td>
<td>Title of the show</td>
</tr>
<tr class="even">
<td><code>director</code></td>
<td>Director of the show</td>
</tr>
<tr class="odd">
<td><code>cast</code></td>
<td>Cast of the show</td>
</tr>
<tr class="even">
<td><code>country</code></td>
<td>Country of origin</td>
</tr>
<tr class="odd">
<td><code>date_added</code></td>
<td>Date added to Netflix</td>
</tr>
<tr class="even">
<td><code>release_year</code></td>
<td>Year of Netflix release</td>
</tr>
<tr class="odd">
<td><code>duration</code></td>
<td>Duration of the show in minutes</td>
</tr>
<tr class="even">
<td><code>description</code></td>
<td>Description of the show</td>
</tr>
<tr class="odd">
<td><code>genre</code></td>
<td>Show genre</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Importing pandas and matplotlib</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start coding!</span></span>
<span id="cb1-6">netflix_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'netflix_data.csv'</span>)</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">netflix_subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netflix_df[netflix_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Movie"</span>]</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">netflix_movies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netflix_subset[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genre"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"release_year"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span>]]</span>
<span id="cb3-2">netflix_movies.head()</span></code></pre></div>
<div>

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
title
</th>
<th>
country
</th>
<th>
genre
</th>
<th>
release_year
</th>
<th>
duration
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
1
</th>
<td>
7:19
</td>
<td>
Mexico
</td>
<td>
Dramas
</td>
<td>
2016
</td>
<td>
93
</td>
</tr>
<tr>
<th>
2
</th>
<td>
23:59
</td>
<td>
Singapore
</td>
<td>
Horror Movies
</td>
<td>
2011
</td>
<td>
78
</td>
</tr>
<tr>
<th>
3
</th>
<td>
9
</td>
<td>
United States
</td>
<td>
Action
</td>
<td>
2009
</td>
<td>
80
</td>
</tr>
<tr>
<th>
4
</th>
<td>
21
</td>
<td>
United States
</td>
<td>
Dramas
</td>
<td>
2008
</td>
<td>
123
</td>
</tr>
<tr>
<th>
6
</th>
<td>
122
</td>
<td>
Egypt
</td>
<td>
Horror Movies
</td>
<td>
2019
</td>
<td>
95
</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">short_movies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netflix_movies[netflix_movies[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>]</span>
<span id="cb4-2">short_movies.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div>

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
title
</th>
<th>
country
</th>
<th>
genre
</th>
<th>
release_year
</th>
<th>
duration
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
35
</th>
<td>
#Rucker50
</td>
<td>
United States
</td>
<td>
Documentaries
</td>
<td>
2016
</td>
<td>
56
</td>
</tr>
<tr>
<th>
55
</th>
<td>
100 Things to do Before High School
</td>
<td>
United States
</td>
<td>
Uncategorized
</td>
<td>
2014
</td>
<td>
44
</td>
</tr>
<tr>
<th>
67
</th>
<td>
13TH: A Conversation with Oprah Winfrey &amp; Ava …
</td>
<td>
NaN
</td>
<td>
Uncategorized
</td>
<td>
2017
</td>
<td>
37
</td>
</tr>
<tr>
<th>
101
</th>
<td>
3 Seconds Divorce
</td>
<td>
Canada
</td>
<td>
Documentaries
</td>
<td>
2018
</td>
<td>
53
</td>
</tr>
<tr>
<th>
146
</th>
<td>
A 3 Minute Hug
</td>
<td>
Mexico
</td>
<td>
Documentaries
</td>
<td>
2019
</td>
<td>
28
</td>
</tr>
<tr>
<th>
162
</th>
<td>
A Christmas Special: Miraculous: Tales of Lady…
</td>
<td>
France
</td>
<td>
Uncategorized
</td>
<td>
2016
</td>
<td>
22
</td>
</tr>
<tr>
<th>
171
</th>
<td>
A Family Reunion Christmas
</td>
<td>
United States
</td>
<td>
Uncategorized
</td>
<td>
2019
</td>
<td>
29
</td>
</tr>
<tr>
<th>
177
</th>
<td>
A Go! Go! Cory Carson Christmas
</td>
<td>
United States
</td>
<td>
Children
</td>
<td>
2020
</td>
<td>
22
</td>
</tr>
<tr>
<th>
178
</th>
<td>
A Go! Go! Cory Carson Halloween
</td>
<td>
NaN
</td>
<td>
Children
</td>
<td>
2020
</td>
<td>
22
</td>
</tr>
<tr>
<th>
179
</th>
<td>
A Go! Go! Cory Carson Summer Camp
</td>
<td>
NaN
</td>
<td>
Children
</td>
<td>
2020
</td>
<td>
21
</td>
</tr>
<tr>
<th>
181
</th>
<td>
A Grand Night In: The Story of Aardman
</td>
<td>
United Kingdom
</td>
<td>
Documentaries
</td>
<td>
2015
</td>
<td>
59
</td>
</tr>
<tr>
<th>
200
</th>
<td>
A Love Song for Latasha
</td>
<td>
United States
</td>
<td>
Documentaries
</td>
<td>
2020
</td>
<td>
20
</td>
</tr>
<tr>
<th>
220
</th>
<td>
A Russell Peters Christmas
</td>
<td>
Canada
</td>
<td>
Stand-Up
</td>
<td>
2011
</td>
<td>
44
</td>
</tr>
<tr>
<th>
233
</th>
<td>
A StoryBots Christmas
</td>
<td>
United States
</td>
<td>
Children
</td>
<td>
2017
</td>
<td>
26
</td>
</tr>
<tr>
<th>
237
</th>
<td>
A Tale of Two Kitchens
</td>
<td>
United States
</td>
<td>
Documentaries
</td>
<td>
2019
</td>
<td>
30
</td>
</tr>
<tr>
<th>
242
</th>
<td>
A Trash Truck Christmas
</td>
<td>
NaN
</td>
<td>
Children
</td>
<td>
2020
</td>
<td>
28
</td>
</tr>
<tr>
<th>
247
</th>
<td>
A Very Murray Christmas
</td>
<td>
United States
</td>
<td>
Comedies
</td>
<td>
2015
</td>
<td>
57
</td>
</tr>
<tr>
<th>
285
</th>
<td>
Abominable Christmas
</td>
<td>
United States
</td>
<td>
Children
</td>
<td>
2012
</td>
<td>
44
</td>
</tr>
<tr>
<th>
295
</th>
<td>
Across Grace Alley
</td>
<td>
United States
</td>
<td>
Dramas
</td>
<td>
2013
</td>
<td>
24
</td>
</tr>
<tr>
<th>
305
</th>
<td>
Adam Devine: Best Time of Our Lives
</td>
<td>
United States
</td>
<td>
Stand-Up
</td>
<td>
2019
</td>
<td>
59
</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lab, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> netflix_movies.iterrows():</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genre'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Children"</span>:</span>
<span id="cb6-3">        colors.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blue"</span>)</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genre'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Documentaries"</span>:</span>
<span id="cb6-5">        colors.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Red"</span>)</span>
<span id="cb6-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'genre'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stand-Up"</span>:</span>
<span id="cb6-7">        colors.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Green"</span>)</span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-9">        colors.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Black"</span>)</span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">colors[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<pre><code>['Black',
 'Black',
 'Black',
 'Black',
 'Black',
 'Black',
 'Black',
 'Black',
 'Black',
 'Red']</code></pre>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span></code></pre></div>
<pre><code>&lt;Figure size 1200x800 with 0 Axes&gt;</code></pre>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">plt.scatter(netflix_movies[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'release_year'</span>], netflix_movies[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'duration'</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors)</span></code></pre></div>
<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f49c4f3c430&gt;</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_science/posts/netflix_files/netflix_10_1.png" class="img-fluid figure-img"></p>
<figcaption>png</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Movie Duration by Year of Release"</span>)</span>
<span id="cb13-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Release year"</span>)</span>
<span id="cb13-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Duration (min)"</span>)</span></code></pre></div>
<pre><code>Text(0, 0.5, 'Duration (min)')</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_science/posts/netflix_files/netflix_11_1.png" class="img-fluid figure-img"></p>
<figcaption>png</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">plt.show()</span></code></pre></div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span></span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Importing pandas and matplotlib</span></span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read in the Netflix CSV as a DataFrame</span></span>
<span id="cb17-6">netflix_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"netflix_data.csv"</span>)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset the DataFrame for type "Movie"</span></span>
<span id="cb17-9">netflix_subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netflix_df[netflix_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Movie"</span>]</span>
<span id="cb17-10"></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select only the columns of interest</span></span>
<span id="cb17-12">netflix_movies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netflix_subset[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genre"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"release_year"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span>]]</span>
<span id="cb17-13"></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter for durations shorter than 60 minutes</span></span>
<span id="cb17-15">short_movies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> netflix_movies[netflix_movies.duration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>]</span>
<span id="cb17-16"></span>
<span id="cb17-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define an empty list</span></span>
<span id="cb17-18">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-19"></span>
<span id="cb17-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over rows of netflix_movies</span></span>
<span id="cb17-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> label, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> netflix_movies.iterrows() :</span>
<span id="cb17-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genre"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Children"</span> :</span>
<span id="cb17-23">        colors.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb17-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genre"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Documentaries"</span> :</span>
<span id="cb17-25">        colors.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb17-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"genre"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stand-Up"</span>:</span>
<span id="cb17-27">        colors.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>)</span>
<span id="cb17-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-29">        colors.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span>
<span id="cb17-30">        </span>
<span id="cb17-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inspect the first 10 values in your list        </span></span>
<span id="cb17-32">colors[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb17-33"></span>
<span id="cb17-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the figure style and initalize a new figure</span></span>
<span id="cb17-35">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb17-36"></span>
<span id="cb17-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a scatter plot of duration versus release_year</span></span>
<span id="cb17-38">plt.scatter(netflix_movies.release_year, netflix_movies.duration, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors)</span>
<span id="cb17-39"></span>
<span id="cb17-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a title and axis labels</span></span>
<span id="cb17-41">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Movie Duration by Year of Release"</span>)</span>
<span id="cb17-42">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Release year"</span>)</span>
<span id="cb17-43">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Duration (min)"</span>)</span>
<span id="cb17-44"></span>
<span id="cb17-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the plot</span></span>
<span id="cb17-46">plt.show()</span>
<span id="cb17-47"></span>
<span id="cb17-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Are we certain that movies are getting shorter?</span></span>
<span id="cb17-49">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_science/posts/netflix_files/netflix_14_0.png" class="img-fluid figure-img"></p>
<figcaption>png</figcaption>
</figure>
</div>


</section>
</section>

 ]]></description>
  <category>DataCamp</category>
  <category>Completed</category>
  <guid>https://chriskornaros.github.io/pages/projects/data_science/posts/netflix.html</guid>
  <pubDate>Mon, 30 Sep 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>User Login Validation</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/projects/data_science/posts/login_validation.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_science/posts/images/login_img.jpg" class="img-fluid figure-img"></p>
<figcaption>login_img</figcaption>
</figure>
</div>
<p>You recently joined a small startup as a junior developer. The product managers have come to you for help improving new user sign-ups for the company’s flagship mobile app.</p>
<p>There are lots of invalid and incomplete sign-up attempts crashing the app. Before creating new accounts, you suggest standardizing validation checks by writing reusable Python functions to validate names, emails, passwords, etc. The managers love this idea and task you with coding core validation functions for improving sign-ups. It’s your job to write these custom functions to check all user inputs to ensure they meet minimum criteria before account creation to reduce crashes.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Re-run this cell</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preloaded data for validating email domain.</span></span>
<span id="cb1-3">top_level_domains <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".org"</span>,</span>
<span id="cb1-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".net"</span>,</span>
<span id="cb1-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".edu"</span>,</span>
<span id="cb1-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".ac"</span>,</span>
<span id="cb1-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".gov"</span>,</span>
<span id="cb1-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".com"</span>,</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".io"</span></span>
<span id="cb1-11">]</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start coding here. Use as many cells as you need.</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validate_name(name):</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb2-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: </span>
<span id="cb2-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validate_email(email):</span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'@'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> email:</span>
<span id="cb2-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> domain <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> top_level_domains:</span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> domain <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> email:</span>
<span id="cb2-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>



 ]]></description>
  <category>DataCamp</category>
  <category>Completed</category>
  <guid>https://chriskornaros.github.io/pages/projects/data_science/posts/login_validation.html</guid>
  <pubDate>Mon, 30 Sep 2024 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
