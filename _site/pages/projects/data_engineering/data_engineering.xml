<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Chris Kornaros</title>
<link>https://chriskornaros.github.io/pages/projects/data_engineering/data_engineering.html</link>
<atom:link href="https://chriskornaros.github.io/pages/projects/data_engineering/data_engineering.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Fri, 13 Dec 2024 06:00:00 GMT</lastBuildDate>
<item>
  <title>Basic OSS Architecture</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/projects/data_engineering/posts/basic_oss.html</link>
  <description><![CDATA[ 




<p>The purpose of this project is to showcase the power of open source tools when designing a data and analytics system. I will be walking through my workflow step by step, and including both images, code, and notes.</p>
<section id="project-initialization" class="level2">
<h2 class="anchored" data-anchor-id="project-initialization">Project Initialization</h2>
<section id="first-steps" class="level3">
<h3 class="anchored" data-anchor-id="first-steps">First Steps</h3>
<p>Let’s start from scratch, a blank <a href="https://www.code.visualstudio.com/">VS Code</a> IDE. We’ll do everything from the command line, so make sure to open that up (Ctrl-`).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/blank_vscode_ide.png" class="img-fluid figure-img"></p>
<figcaption>Blank IDE</figcaption>
</figure>
</div>
<p>First, I begin in my home directory. Then, I change to my Documents directory, which I use for all of my projects. This is where I’ll begin creating the project directory and initializing the subsequent tools. As you’ll see below, I first initialize the uv repository and change into it. Then, I create the repo on GitHub (because I like generating the license then), pull (my global is set to merge), commit, and make the initial push. Then, I will initialize the Quarto project, to begin documentation as I work.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/uv_gh_init.png" class="img-fluid figure-img"></p>
<figcaption>Project and Repo Initialization</figcaption>
</figure>
</div>
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/uv_base_env.png" class="img-fluid" alt="Basic Uv Environment"> You can see here that I have both <code>jupyter</code> and <code>dbt</code> already installed. That’s because <code>uv</code> installs tools system wide, because these are typically used from the CLI. That being said, some CLI tools (like Quarto and DuckDB) in my experience don’t work with <code>uv</code> because it doesn’t install their executables.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/gh_remote_add.png" class="img-fluid figure-img"></p>
<figcaption>Git Remote Add and Pull</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/first_commit.png" class="img-fluid figure-img"></p>
<figcaption>First Commit</figcaption>
</figure>
</div>
</section>
<section id="moving-on" class="level3">
<h3 class="anchored" data-anchor-id="moving-on">Moving On</h3>
<p>Now, it’s time to setup some extra functionality in the project. I’m going to be using Quarto for documentation, so I’ll run <code>quarto create project</code>. To learn more about Quarto and configuring your documentation in projects, checkout my <a href="https://ChrisKornaros.github.io/guides/quarto/">guide</a>. That being said, if you are ever taking screenshots of your work and want to quickly move them into your images folder, you can do so from the CLI.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/quarto_init.png" class="img-fluid figure-img"></p>
<figcaption>Quarto Project Initialization</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/mv_cli_images.png" class="img-fluid figure-img"></p>
<figcaption>Moving Images from the CLI</figcaption>
</figure>
</div>
<p>Now that you’ve done that, it’s time to start adding dependencies. As a heads up, don’t be surprised if you don’t see the <code>uv.lock</code> or the <code>.venv</code> objects in your directory right away, because <code>uv</code> doesn’t create those until you add dependencies. Simply run <code>uv add</code> to start adding them. Afterwards, the necessary requirements and lock files will update automatically. If you want to learn more, checkout my <a href="https://ChrisKornaros.github.io/guides/uv">uv guide</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/uv_add.png" class="img-fluid figure-img"></p>
<figcaption>Add Dependencies with uv</figcaption>
</figure>
</div>
<section id="the-pyproject.toml-file" class="level4">
<h4 class="anchored" data-anchor-id="the-pyproject.toml-file">The Pyproject.toml file</h4>
<p>Once that’s done, uv will update the general dependencies in the <code>pyproject.toml</code> file and the specific versions in <code>uv.lock</code> (think requirements.txt on steroids). The nice thing here, it only lists the actual package you needed, not everything else that the package requires. So, when you want to remove packages you can simply use <code>uv remove</code> and the individual package names listed here to remove <em>everything</em> in your environment. There’s an example below.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">[project]</span>
<span id="cb1-2">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"basic-oss-architecture"</span></span>
<span id="cb1-3">version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span>
<span id="cb1-4">description <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Add your description here"</span></span>
<span id="cb1-5">readme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"README.md"</span></span>
<span id="cb1-6">requires<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=3.13"</span></span>
<span id="cb1-7">dependencies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbt&gt;=1.0.0.38.22"</span>,</span>
<span id="cb1-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duckdb&gt;=1.1.3"</span>,</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"great-expectations&gt;=0.18.22"</span>,</span>
<span id="cb1-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jupyter&gt;=1.1.1"</span>,</span>
<span id="cb1-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas&gt;=2.2.3"</span>,</span>
<span id="cb1-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytest&gt;=8.3.4"</span>,</span>
<span id="cb1-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarto&gt;=0.1.0"</span>,</span>
<span id="cb1-15">]</span></code></pre></div>
</section>
<section id="using-.gitignore-effectively" class="level4">
<h4 class="anchored" data-anchor-id="using-.gitignore-effectively">Using .gitignore effectively</h4>
<p>You probably noticed, but when you initialize a project with <code>uv</code> it automatically creates a <code>.gitignore</code> file and populates it with basic files and directories which don’t need to be checked into source control (like .venv). I take this a step further, and add some Quarto specific files and directories too, <code>.quarto</code> and <code>_files</code> folders. Below is an example of my file at this early project stage.</p>
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/gitignore_sample.png" class="img-fluid"></p>


</section>
</section>
</section>

 ]]></description>
  <category>Research</category>
  <category>Ongoing</category>
  <guid>https://chriskornaros.github.io/pages/projects/data_engineering/posts/basic_oss.html</guid>
  <pubDate>Fri, 13 Dec 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Open Source Data and Analytics Architecture</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/projects/data_engineering/posts/oss_data_arch.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I will update this when I begin the project. The goal here is to explore and create a tech stack to support modern data and analytical workloads, using entirely open source software. Ideally, I’ll be able to scale it to terabytes and then share that template and the guide as a public resource.</p>
<p>Currently, I’m thinking of the following tools, as part of a non-exhaustive list of the stack:<br>
</p>
<blockquote class="blockquote">
<p>OS/Environment: <code>zsh/bash</code><br>
Project and Package Management: <code>uv</code><br>
Collaboration and Source Control: <code>Github</code><br>
Documentation: <code>Quarto</code><br>
Data Modeling: <code>dbt</code><br>
Containerization: <code>Docker</code><br>
Container Orchestration: <code>Kubernetes</code><br>
OLTP Database: <code>PostgreSQL</code><br>
OLAP Database: <code>DuckDB</code><br>
Batch Ingestion: <code>Python</code><br>
ETL: <code>dbt</code><br>
Testing: <code>pytest</code><br>
Data Quality: <code>Great Expectations</code><br>
Metadata: <code>Unity Catalog</code><br>
ETL Orchestration: <code>Airflow</code> <em>and/or</em> <code>Dagster</code><br>
Streaming Ingestion: <code>Kafka</code><br>
</p>
</blockquote>
<p>General workflow I’m envisioning:</p>
<ol type="1">
<li>Initialize project with <code>uv</code>, add basic dependencies for the environment</li>
<li>Create the repo with the GitHub CLI</li>
<li>Set the remote as the upstream and do the initial commit</li>
<li>Initialize the <code>quarto</code> and <code>dbt</code> projects as subdirectories of the main, <code>uv</code> project directory</li>
<li>Create the <code>postgres</code> container with <code>docker</code>, use this to initialize the <code>postgres</code> database (Prod)</li>
<li>In your <code>uv</code> envionrment, initialize the <code>duckdb</code> (Dev/Test) persistent database
<ul>
<li>Simpler to work quickly with <code>duckdb</code>, <code>postgres</code> has more configurations/overhead, but is better for long term persistent</li>
</ul></li>
<li>Use <code>python and duckdb</code> to ingest the initial batch of raw data</li>
<li>Use <code>dbt</code> to define the data model, <code>pytest</code> to define the basic tests, and <code>great expectations</code> to define data quality</li>
<li>Initialize the <code>unity catalog</code> instance, add the connection information (Dev/Test/Prod)</li>
<li>Generate metadata and lineage</li>
<li>Start scheduling and orchestrating jobs</li>
<li>Potentially scale system up to handle stremaing data</li>
</ol>


</section>

 ]]></description>
  <category>Technology</category>
  <category>Planning</category>
  <guid>https://chriskornaros.github.io/pages/projects/data_engineering/posts/oss_data_arch.html</guid>
  <pubDate>Thu, 12 Dec 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Bank Marketing ETL Project</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/projects/data_engineering/posts/bank_etl.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://chriskornaros.github.io/pages/projects/data_engineering/posts/images/piggy_bank.jpg" class="img-fluid figure-img"></p>
<figcaption>Piggy bank</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is a DataCamp project. I’m not responsible for any part of the problem scope, resources, documents, files, etc. That being said, I converted the Jupyter notebook provided into a Quarto Markdown file to add to my portfolio.</p>
</div>
</div>
<p>Personal loans are a lucrative revenue stream for banks. The typical interest rate of a two-year loan in the United Kingdom is <a href="https://www.experian.com/blogs/ask-experian/whats-a-good-interest-rate-for-a-personal-loan/">around 10%</a>. This might not sound like a lot, but in September 2022 alone UK consumers borrowed <a href="https://www.ukfinance.org.uk/system/files/2022-12/Household%20Finance%20Review%202022%20Q3-%20Final.pdf">around £1.5 billion</a>, which would mean approximately £300 million in interest generated by banks over two years!</p>
<p>You have been asked to work with a bank to clean the data they collected as part of a recent marketing campaign, which aimed to get customers to take out a personal loan. They plan to conduct more marketing campaigns going forward so would like you to ensure it conforms to the specific structure and data types that they specify so that they can then use the cleaned data you provide to set up a PostgreSQL database, which will store this campaign’s data and allow data from future campaigns to be easily imported.</p>
<p>They have supplied you with a csv file called <code>"bank_marketing.csv"</code>, which you will need to clean, reformat, and split the data, saving three final csv files. Specifically, the three files should have the names and contents as outlined below:</p>
<section id="client.csv" class="level2">
<h2 class="anchored" data-anchor-id="client.csv"><code>client.csv</code></h2>
<table class="caption-top table">
<colgroup>
<col style="width: 14%">
<col style="width: 20%">
<col style="width: 23%">
<col style="width: 41%">
</colgroup>
<thead>
<tr class="header">
<th>column</th>
<th>data type</th>
<th>description</th>
<th>cleaning requirements</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>client_id</code></td>
<td><code>integer</code></td>
<td>Client ID</td>
<td>N/A</td>
</tr>
<tr class="even">
<td><code>age</code></td>
<td><code>integer</code></td>
<td>Client’s age in years</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td><code>job</code></td>
<td><code>object</code></td>
<td>Client’s type of job</td>
<td>Change <code>"."</code> to <code>"_"</code></td>
</tr>
<tr class="even">
<td><code>marital</code></td>
<td><code>object</code></td>
<td>Client’s marital status</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td><code>education</code></td>
<td><code>object</code></td>
<td>Client’s level of education</td>
<td>Change <code>"."</code> to <code>"_"</code> and <code>"unknown"</code> to <code>np.NaN</code></td>
</tr>
<tr class="even">
<td><code>credit_default</code></td>
<td><code>bool</code></td>
<td>Whether the client’s credit is in default</td>
<td>Convert to <code>boolean</code> data type:<br> <code>1</code> if <code>"yes"</code>, otherwise <code>0</code></td>
</tr>
<tr class="odd">
<td><code>mortgage</code></td>
<td><code>bool</code></td>
<td>Whether the client has an existing mortgage (housing loan)</td>
<td>Convert to boolean data type:<br> <code>1</code> if <code>"yes"</code>, otherwise <code>0</code></td>
</tr>
</tbody>
</table>
<p><br></p>
</section>
<section id="campaign.csv" class="level2">
<h2 class="anchored" data-anchor-id="campaign.csv"><code>campaign.csv</code></h2>
<table class="caption-top table">
<colgroup>
<col style="width: 14%">
<col style="width: 20%">
<col style="width: 23%">
<col style="width: 41%">
</colgroup>
<thead>
<tr class="header">
<th>column</th>
<th>data type</th>
<th>description</th>
<th>cleaning requirements</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>client_id</code></td>
<td><code>integer</code></td>
<td>Client ID</td>
<td>N/A</td>
</tr>
<tr class="even">
<td><code>number_contacts</code></td>
<td><code>integer</code></td>
<td>Number of contact attempts to the client in the current campaign</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td><code>contact_duration</code></td>
<td><code>integer</code></td>
<td>Last contact duration in seconds</td>
<td>N/A</td>
</tr>
<tr class="even">
<td><code>previous_campaign_contacts</code></td>
<td><code>integer</code></td>
<td>Number of contact attempts to the client in the previous campaign</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td><code>previous_outcome</code></td>
<td><code>bool</code></td>
<td>Outcome of the previous campaign</td>
<td>Convert to boolean data type:<br> <code>1</code> if <code>"success"</code>, otherwise <code>0</code>.</td>
</tr>
<tr class="even">
<td><code>campaign_outcome</code></td>
<td><code>bool</code></td>
<td>Outcome of the current campaign</td>
<td>Convert to boolean data type:<br> <code>1</code> if <code>"yes"</code>, otherwise <code>0</code>.</td>
</tr>
<tr class="odd">
<td><code>last_contact_date</code></td>
<td><code>datetime</code></td>
<td>Last date the client was contacted</td>
<td>Create from a combination of <code>day</code>, <code>month</code>, and a newly created <code>year</code> column (which should have a value of <code>2022</code>); <br> <strong>Format =</strong> <code>"YYYY-MM-DD"</code></td>
</tr>
</tbody>
</table>
<p><br></p>
</section>
<section id="economics.csv" class="level2">
<h2 class="anchored" data-anchor-id="economics.csv"><code>economics.csv</code></h2>
<table class="caption-top table">
<colgroup>
<col style="width: 14%">
<col style="width: 20%">
<col style="width: 23%">
<col style="width: 41%">
</colgroup>
<thead>
<tr class="header">
<th>column</th>
<th>data type</th>
<th>description</th>
<th>cleaning requirements</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>client_id</code></td>
<td><code>integer</code></td>
<td>Client ID</td>
<td>N/A</td>
</tr>
<tr class="even">
<td><code>cons_price_idx</code></td>
<td><code>float</code></td>
<td>Consumer price index (monthly indicator)</td>
<td>N/A</td>
</tr>
<tr class="odd">
<td><code>euribor_three_months</code></td>
<td><code>float</code></td>
<td>Euro Interbank Offered Rate (euribor) three-month rate (daily indicator)</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start coding here...</span></span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bank_marketing.csv"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit_default"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mortgage"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"previous_outcome"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"campaign_outcome"</span>]:</span>
<span id="cb2-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(col)</span>
<span id="cb2-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--------------"</span>)</span>
<span id="cb2-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df[col].value_counts())</span></code></pre></div>
<pre><code>credit_default
--------------
no         32588
unknown     8597
yes            3
Name: credit_default, dtype: int64
mortgage
--------------
yes        21576
no         18622
unknown      990
Name: mortgage, dtype: int64
previous_outcome
--------------
nonexistent    35563
failure         4252
success         1373
Name: previous_outcome, dtype: int64
campaign_outcome
--------------
no     36548
yes     4640
Name: campaign_outcome, dtype: int64</code></pre>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'client_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'age'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'job'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'marital'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'education'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit_default'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mortgage'</span>]]</span>
<span id="cb4-2">campaign <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'client_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number_contacts'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contact_duration'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'previous_campaign_contacts'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'previous_outcome'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'campaign_outcome'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>]]</span>
<span id="cb4-3">economics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'client_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cons_price_idx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euribor_three_months'</span>]]</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(client.head())</span>
<span id="cb4-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(campaign.head())</span>
<span id="cb4-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(economics.head())</span></code></pre></div>
<pre><code>   client_id  age        job  marital    education credit_default mortgage
0          0   56  housemaid  married     basic.4y             no       no
1          1   57   services  married  high.school        unknown       no
2          2   37   services  married  high.school             no      yes
3          3   40     admin.  married     basic.6y             no       no
4          4   56   services  married  high.school             no       no
   client_id  number_contacts  contact_duration  ...  campaign_outcome day month
0          0                1               261  ...                no  13   may
1          1                1               149  ...                no  19   may
2          2                1               226  ...                no  23   may
3          3                1               151  ...                no  27   may
4          4                1               307  ...                no   3   may

[5 rows x 8 columns]
   client_id  cons_price_idx  euribor_three_months
0          0          93.994                 4.857
1          1          93.994                 4.857
2          2          93.994                 4.857
3          3          93.994                 4.857
4          4          93.994                 4.857</code></pre>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb6-2"></span>
<span id="cb6-3">client_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.copy()</span>
<span id="cb6-4">client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'job'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'job'</span>].replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)</span>
<span id="cb6-5">client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'education'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'education'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_'</span>)</span>
<span id="cb6-6">client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'education'</span>].replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unknown'</span>, np.NaN, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-7">client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit_default'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit_default'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-8">client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit_default'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit_default'</span>].astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bool'</span>)</span>
<span id="cb6-9">client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mortgage'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mortgage'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-10">client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mortgage'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mortgage'</span>].astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bool'</span>)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(client_c.head())</span></code></pre></div>
<pre><code>   client_id  age        job  marital    education  credit_default  mortgage
0          0   56  housemaid  married     basic_4y           False     False
1          1   57   services  married  high_school           False     False
2          2   37   services  married  high_school           False      True
3          3   40     admin.  married     basic_6y           False     False
4          4   56   services  married  high_school           False     False</code></pre>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">campaign_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> campaign.copy()</span>
<span id="cb8-2"></span>
<span id="cb8-3">campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'previous_outcome'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'previous_outcome'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'success'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bool'</span>)</span>
<span id="cb8-4">campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'campaign_outcome'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'campaign_outcome'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bool'</span>)</span>
<span id="cb8-5">campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span></span>
<span id="cb8-6">campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'last_contact_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">%b%Y'</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8">campaign_c.head()</span></code></pre></div>
<div>

<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
client_id
</th>
<th>
number_contacts
</th>
<th>
contact_duration
</th>
<th>
previous_campaign_contacts
</th>
<th>
previous_outcome
</th>
<th>
campaign_outcome
</th>
<th>
day
</th>
<th>
month
</th>
<th>
year
</th>
<th>
last_contact_date
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
0
</td>
<td>
1
</td>
<td>
261
</td>
<td>
0
</td>
<td>
False
</td>
<td>
False
</td>
<td>
13
</td>
<td>
may
</td>
<td>
2022
</td>
<td>
2022-05-13
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
1
</td>
<td>
149
</td>
<td>
0
</td>
<td>
False
</td>
<td>
False
</td>
<td>
19
</td>
<td>
may
</td>
<td>
2022
</td>
<td>
2022-05-19
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
1
</td>
<td>
226
</td>
<td>
0
</td>
<td>
False
</td>
<td>
False
</td>
<td>
23
</td>
<td>
may
</td>
<td>
2022
</td>
<td>
2022-05-23
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3
</td>
<td>
1
</td>
<td>
151
</td>
<td>
0
</td>
<td>
False
</td>
<td>
False
</td>
<td>
27
</td>
<td>
may
</td>
<td>
2022
</td>
<td>
2022-05-27
</td>
</tr>
<tr>
<th>
4
</th>
<td>
4
</td>
<td>
1
</td>
<td>
307
</td>
<td>
0
</td>
<td>
False
</td>
<td>
False
</td>
<td>
3
</td>
<td>
may
</td>
<td>
2022
</td>
<td>
2022-05-03
</td>
</tr>
</tbody>
</table>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">campaign_c[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'previous_outcome'</span>].value_counts()</span></code></pre></div>
<pre><code>False    39815
True      1373
Name: previous_outcome, dtype: int64</code></pre>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client_c</span>
<span id="cb11-2">campaign <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> campaign_c.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(client.head())</span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(campaign.head())</span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(economics.head())</span></code></pre></div>
<pre><code>   client_id  age        job  marital    education  credit_default  mortgage
0          0   56  housemaid  married     basic_4y           False     False
1          1   57   services  married  high_school           False     False
2          2   37   services  married  high_school           False      True
3          3   40     admin.  married     basic_6y           False     False
4          4   56   services  married  high_school           False     False
   client_id  number_contacts  ...  campaign_outcome  last_contact_date
0          0                1  ...             False         2022-05-13
1          1                1  ...             False         2022-05-19
2          2                1  ...             False         2022-05-23
3          3                1  ...             False         2022-05-27
4          4                1  ...             False         2022-05-03

[5 rows x 7 columns]
   client_id  cons_price_idx  euribor_three_months
0          0          93.994                 4.857
1          1          93.994                 4.857
2          2          93.994                 4.857
3          3          93.994                 4.857
4          4          93.994                 4.857</code></pre>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">client.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'client.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb13-2">campaign.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'campaign.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb13-3">economics.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'economics.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>


</section>

 ]]></description>
  <category>DataCamp</category>
  <category>Completed</category>
  <guid>https://chriskornaros.github.io/pages/projects/data_engineering/posts/bank_etl.html</guid>
  <pubDate>Mon, 30 Sep 2024 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
