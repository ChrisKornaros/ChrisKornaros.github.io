---
title: "Quarto Development Notes"
---

# Quarto
## Overview
Quarto is:\

> An open-source scientific and technical publishing system\
> Author using Jupyter notebooks or with plain text markdown in your favorite editor.\
> Create dynamic content with Python, R, Julia, and Observable.\
> Publish reproducible, production quality articles, presentations, dashboards, websites, blogs, and books in HTML, PDF, MS Word ePub, and more.\
> Share knowledge and insights organization-wide by publishing to Posit Connect, Confluence, or other publishing systems.\
> Write using Pandoc markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.

## Configurations
### Downloading and Updating

### The _brand.yml File
This is a new feature with Quarto 1.6 that allows you to define and save your design specifications in a YAML file. While this file is specific to your Quarto project directories, you can store and share the file across projects or with others to maintain brand consistency. Luckily, there is great documentation if you want more details [brand.yml](https://posit-dev.github.io/brand-yml/brand/). While there is a lot to cover, I'll go over some basics to get started. It's important to remember that if you specify colors for anything within .qmd files, those will overwrite the defaults in the brand file.

#### Color
This is obviously an important part of all branding. There are two main components:

1. `palette`
2. `theme colors`

Palette lets you specify hexcodes and assign those to various strings. Those string values could be generic terms, like *green* (if there is a specific shade you would like), or terms specific to brand.yml's *theme colors*. When you set your default colors in this way, you can then customize the output in the _quarto.yml file. To modify, for example, your navigation bar, just define the background and foreground properties under the `navbar` property. 

Another thing to keep in mind with color, just because it's available in _brand.yml, like `tertiary`, doesn't mean it's defined and functional in the `_quarto.yml` file. So, you may need to be creative with how you use protected terms, like success, danger, or warning. Doing so allows you to take advantage of the programmatic benefits of the brand file, while specifying several, possibly, similar shades that would be tricky to do just be renaming colors, such as red, blue, or yellow. 

If you aren't sure on what colors or palettes to choose, using an LLM based chatbot can be helpful. This allows you to describe the colors and themes you're going for, as well as refine them over time.

#### Typography
This section lets you control which font families are included in your Quarto project. Then, you can specify where various fonts are used and for some properties, even change their specific color. As a heads up, the _brand.yml documentation seems to be correct and updated; however, `bash` code blocks don't render the monospace-background the same way. So, while in-line monospace backgrounds and monospace backgrounds for Python (at the very least) will be colored as the documentation says. Bash code blocks will have no background, just the code itself in the specified font color.

#### Defaults
This section gives you more control over various defaults, for HTML Bootstrap, Quarto, Shiny, etc. When configuring specific design colors, using the bootstrap default section will allow you to keep your Quarto files simple, while providing a high level of control over design.

#### SASS - Syntactically Awesome Style Sheets
Remember, whatever you can't configure simply in your _brand.yml file, you can do so in a .scss file. For example, if you want to create custom light and dark mode themes, just create .scss files with the appropriate code and place this in your docs (main Quarto project) directory. Below is an example of a dark mode theme. I set the default values for the scss bootstrap variables at the top. Then, I specified the specific rules for various parts of the page. For defined variables, blockquote, you don't need a `.`, but for features specific to quarto rendered sites, add a . before. For example, to modify the look of code blocks, you must use the `.sourceCode` variable. To find out the name of a variable you don't know, just inspect the specific element on the webpage, and the class name will translate 1:1 with the variable name, spaces included. For a list of all CSS variable properties, visit (CSS Web Docs)[https://developer.mozilla.org/en-US/docs/Web/CSS/Reference]. 

```css
/*-- scss:defaults --*/
$background: #2E4053;
$foreground: #F7F7F7;
$primary: #FF9900;
$secondary: #56B3FA;
$tertiary: #655D4B;
$light: #F7F7F7;
$dark: #1C1F24;
$success: #33373D;
$danger: #1A1D23;
$info: #56B3FA;

/*-- scss:rules --*/
body {
  font-family: 'Open Sans', sans-serif;
  background-color: $background;
  color: $foreground;
}

h1, h2, h3, h4, h5, h6 {
  color: $danger;
}

blockquote {
  background-color: $success; /* added background color */
  border-color: $dark;
  color: $secondary;
}

code {
  background-color: $success;
  color: $info;
}

.sourceCode {
  background-color: $success;
  color: $info;
  border-style: none;
}
```

## Projects
This section, and the rest of the guide, assume you're familiar with and using the uv package and project manager for Python, git for version control, and the GitHub CLI for collaboration. I'll be referencing all of these tools throughout the rest of the guide.

### Initializing a Project
#### The create command
It's easy to start a project with Quarto from the command line, and there are a few built-in project types to further simplify the startup process. Furthermore, Quarto provides a simple command for creating (or initializing) a project (or extension), `quarto create project`, and a handy setup guide to help you use it. The following code shows you my terminal input and outputs.

```bash
chriskornaros@chriss-air test % quarto create project
? Type › default
? Directory › docs
? Title (docs) › test_docs
Creating project at /Users/chriskornaros/Documents/test/docs:
  - Created _quarto.yml
  - Created .gitignore
  - Created test_docs.qmd
? Open With › (don't open)
```

For a quick run through: quarto create project initializes a quarto project directory within your current working directory (the uv parent directory), `type` lets you choose the type of Quarto documentation (book, website, confluence, etc.), title is teh title of your homepage (.qmd) file. Personally, I like to remove the `docs/.gitignore` file because uv creates one when you initialize a project, in the parent directory. So, having just one .gitignore file helps me keep track of things more easily.

### Rendering a Projects

## Websites
### Rendering Websites 
I run the following code block from my main project directory. My Quarto project directory is a folder called docs. So, I specify to Quarto that I want to render the entire Quarto project `docs`, but `quarto render`'s context is specific to the *quarto project* directory. Therefore, I need to use the `.` to specify that I want the rendered `.html` files put in the Quarto project folder, and sub folder.

```bash
quarto render docs --output-dir .
```

### Website Navigation
#### Top Navigation
After you've set your default color values in `_brand.yml`, make sure to specify the design details at the top of your `navbar` property.

#### Side Navigation
It's crucial, for nested subpages, to have the parent landing page's .qmd file's path as a standalone line in the contents of the _quarto.yml file. Failing to do so will remove the sidebar from the landing page's navigation; however, for subsections, those should be specified within an href paramter, under the section line. Additionally, for the collapsable functionality to work consistently in a sidebar, you'll need it docked. The behavior is inconsistent with floating sidebars. After you've set your default color values in `_brand.yml`, make sure to specify the design details at the top of your `sidebar` property.


```{python}
2+2
```