[
  {
    "objectID": "pages/guides/quarto/quarto.html",
    "href": "pages/guides/quarto/quarto.html",
    "title": "Quarto",
    "section": "",
    "text": "Quarto is:\n\n\nAn open-source scientific and technical publishing system\nAuthor using Jupyter notebooks or with plain text markdown in your favorite editor.\nCreate dynamic content with Python, R, Julia, and Observable.\nPublish reproducible, production quality articles, presentations, dashboards, websites, blogs, and books in HTML, PDF, MS Word ePub, and more.\nShare knowledge and insights organization-wide by publishing to Posit Connect, Confluence, or other publishing systems.\nWrite using Pandoc markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.",
    "crumbs": [
      "Quarto"
    ]
  },
  {
    "objectID": "pages/guides/quarto/quarto.html#overview",
    "href": "pages/guides/quarto/quarto.html#overview",
    "title": "Quarto",
    "section": "",
    "text": "Quarto is:\n\n\nAn open-source scientific and technical publishing system\nAuthor using Jupyter notebooks or with plain text markdown in your favorite editor.\nCreate dynamic content with Python, R, Julia, and Observable.\nPublish reproducible, production quality articles, presentations, dashboards, websites, blogs, and books in HTML, PDF, MS Word ePub, and more.\nShare knowledge and insights organization-wide by publishing to Posit Connect, Confluence, or other publishing systems.\nWrite using Pandoc markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.",
    "crumbs": [
      "Quarto"
    ]
  },
  {
    "objectID": "pages/guides/quarto/quarto.html#configurations",
    "href": "pages/guides/quarto/quarto.html#configurations",
    "title": "Quarto",
    "section": "Configurations",
    "text": "Configurations\n\nDownloading and Updating\nFor simple instructions and a download/install guide using a GUI, visit Quarto - Get Started.\nFor MacOS users, I recommend downloading and learning about Homebrew, the package manager. It drastically simplifies all phases of package management. To install, simply use brew install quarto and you’re done.\n\n\nThe _brand.yml File\nThis is a new feature with Quarto 1.6 that allows you to define and save your design specifications in a YAML file. While this file is specific to your Quarto project directories, you can store and share the file across projects or with others to maintain brand consistency. Luckily, there is great documentation if you want more details brand.yml. While there is a lot to cover, I’ll go over some basics to get started. It’s important to remember that if you specify colors for anything within .qmd files, those will overwrite the defaults in the brand file. Furthermore, Quarto and _brand.yml both utilize the Bootstrap web development framework. For a list of its full default values, visit the repo.\n\nColor\nThis is obviously an important part of all branding. There are two main components:\n\npalette\ntheme colors\n\nPalette lets you specify hexcodes and assign those to various strings. Those string values could be generic terms, like green (if there is a specific shade you would like), or terms specific to brand.yml's theme colors. When you set your default colors in this way, you can then customize the output in the _quarto.yml file. To modify, for example, your navigation bar, just define the background and foreground properties under the navbar property.\nAnother thing to keep in mind with color, just because it’s available in _brand.yml, like tertiary, doesn’t mean it’s defined and functional in the _quarto.yml file. So, you may need to be creative with how you use protected terms, like success, danger, or warning. Doing so allows you to take advantage of the programmatic benefits of the brand file, while specifying several, possibly, similar shades that would be tricky to do just be renaming colors, such as red, blue, or yellow.\nIf you aren’t sure on what colors or palettes to choose, using an LLM based chatbot can be helpful. This allows you to describe the colors and themes you’re going for, as well as refine them over time.\n\n\nTypography\nThis section lets you control which font families are included in your Quarto project. Then, you can specify where various fonts are used and for some properties, even change their specific color. As a heads up, the _brand.yml documentation seems to be correct and updated; however, bash code blocks don’t render the monospace-background the same way. So, while in-line monospace backgrounds and monospace backgrounds for Python (at the very least) will be colored as the documentation says. Bash code blocks will have no background, just the code itself in the specified font color.\n\n\nDefaults\nThis section gives you more control over various defaults, for HTML Bootstrap, Quarto, Shiny, etc. When configuring specific design colors, using the bootstrap default section will allow you to keep your Quarto files simple, while providing a high level of control over design.\n\n\nSASS - Syntactically Awesome Style Sheets\nRemember, whatever you can’t configure simply in your _brand.yml file, you can do so in a .scss file. For example, if you want to create custom light and dark mode themes, just create .scss files with the appropriate code and place this in your docs (main Quarto project) directory. Below is an example of a dark mode theme. I set the default values for the scss bootstrap variables at the top. Then, I specified the specific rules for various parts of the page. For defined variables, blockquote, you don’t need a ., but for features specific to quarto rendered sites, add a . before. For example, to modify the look of code blocks, you must use the .sourceCode variable. For child classes, for example the .sourceCode css copy-with-code class, if you want to modify that you’ll need to use .sourceCode pre.copy-with-code. To find out the name of a variable you don’t know, just inspect the specific element on the webpage, and the class name will translate 1:1 with the variable name. Additionally, for any property that you need to specifically update, you can add the !important tag, which means it will override existing rules, but be careful using this.\nFor a list of all CSS variable properties, visit CSS Web Docs.\n/*-- scss:defaults --*/\n$background: #2E4053;\n$foreground: #F7F7F7;\n$primary: #FF9900;\n$secondary: #56B3FA;\n$tertiary: #655D4B;\n$light: #F7F7F7;\n$dark: #1C1F24;\n$success: #33373D;\n$danger: #1A1D23;\n$info: #56B3FA;\n$warning: #FF7575;\n\n\n/*-- scss:rules --*/\nbody {\n  font-family: 'Open Sans', sans-serif;\n  background-color: $background;\n  color: $foreground;\n}\n\nh1, h2, h3 {\n  color: $danger;\n}\n\nh4, h5, h6 {\n  color: $danger;\n  font-weight: bold;\n}\n\nblockquote {\n  background-color: #2E6490; /* added background color */\n  border-color: $dark;\n  color: $danger !important;\n}\n\ncode {\n  background-color: $success;\n  color: $info;\n}\n\n.sourceCode {\n  background-color: $success;\n  color: $info;\n}\n\n.sourceCode pre.code-with-copy{\n  padding: 0;\n}\n\n.callout-title-container.flex-fill {\n  color: $danger;\n}\n\n\n\n\n\n\nImportant 1\n\n\n\nThere are some weird naming convention differences between _brand.yml and Quarto. The big one is monotone being used to reference block quotes, code blocks, and in-line code in _brand, but in Quarto it renders the in-line code as code and the code blocks as sourceCode. Make sure to use inspect element to be sure on what you’re changing. CSS class names can get long, especially when referncing nested classes, just experiment and take your time with things.",
    "crumbs": [
      "Quarto"
    ]
  },
  {
    "objectID": "pages/guides/quarto/quarto.html#projects",
    "href": "pages/guides/quarto/quarto.html#projects",
    "title": "Quarto",
    "section": "Projects",
    "text": "Projects\nThis section, and the rest of the guide, assume you’re familiar with and using the uv package and project manager for Python, git for version control, and the GitHub CLI for collaboration. I’ll be referencing all of these tools throughout the rest of the guide. You can read my guide to learn more about uv\n\nInitializing a Project\n\nThe create command\nIt’s easy to start a project with Quarto from the command line, and there are a few built-in project types to further simplify the startup process. Furthermore, Quarto provides a simple command for creating (or initializing) a project (or extension), quarto create project, and a handy setup guide to help you use it. The following code shows you my terminal input and outputs.\nchriskornaros@chriss-air test % quarto create project\n? Type › default\n? Directory › docs\n? Title (docs) › test_docs\nCreating project at /Users/chriskornaros/Documents/test/docs:\n  - Created _quarto.yml\n  - Created .gitignore\n  - Created test_docs.qmd\n? Open With › (don't open)\nFor a quick run through: quarto create project initializes a quarto project directory within your current working directory (the uv parent directory), type lets you choose the type of Quarto documentation (book, website, confluence, etc.), title is the title of your homepage (.qmd) file. Personally, I like to remove the docs/.gitignore file because uv creates one when you initialize a project, in the parent directory. So, having just one .gitignore file helps me keep track of things more easily.\nThe only directory I added to docs after it was created by quarto, was a pages directory. Here, I keep the various landing pages and their sub directory structures. Ideally, I won’t have any files in there, but the _quarto.yml file will point to their locations in my personal GitHub repo.\n\n\n\nRendering a Projects\nThis part is blank for now. Rendering websites have some specific components to websites and GitHub pages, that are covered later on. I will update this for other document types in the future.",
    "crumbs": [
      "Quarto"
    ]
  },
  {
    "objectID": "pages/guides/quarto/quarto.html#websites",
    "href": "pages/guides/quarto/quarto.html#websites",
    "title": "Quarto",
    "section": "Websites",
    "text": "Websites\n\nRendering Websites\nI run the following code block from my main project directory. My Quarto project directory is a folder called docs. So, I specify to Quarto that I want to render the entire Quarto project docs, but quarto render’s context is specific to the quarto project directory. Therefore, I need to use the . to specify that I want the rendered .html files put in the Quarto project folder, and sub folder.\nquarto render docs --output-dir .\nConversely, you can specify, within the output property of your _quarto.yml file that output-dir: .\nThis is also the same syntax when previewing your website, using quarto preview docs, the difference is there is no need to specify an output directory. What this does is spin up a jupyter kernel to render your .qmd files, then, it displays the output in a browser. When you hit save on your _quarto.yml, .scss, and .qmd files then the site will automatically update (it doesn’t for _brand.yml saves).\nOnce you’ve rendered your website, and pushed the commit, the change is reflected in a few mintues.\n\n\n\n\n\n\nNote 1\n\n\n\nThe ease of using quarto preview is magnified when using uv as your project/package manager. Instead of having to manage various virtual environments and packages, as well as activation and deactivation, uv does it all. Even VS Code picks up on the context uv provides. The terminal will automatically realize you’re in a uv environment and display output as if you were using a virutal environment (even though you haven’t activated it).\n\n\n\n\nWebsite Navigation\n\nTop Navigation\nAfter you’ve set your default color values in _brand.yml, make sure to specify the design details at the top of your navbar property. This is useful, even when using .scss files for more specific design control because you can utilize those variables in your light and dark themes.\nFor pages on your top navigation bar that just have a landing page, simple use the following syntax\nnavbar:\n  left:\n    text: \"Page name\"\n    href: path/to/page/file.qmd\n\n\n\n\n\n\nTip 1\n\n\n\nNotice when I’m using a - and not. This is deliberate. In my development, I realized that where you use and specify the dash can affect functionality. Some places require it, some don’t, and it may depend on the order of various parameters.\n\n\nFor page categories that may have several landing pages, or even subcategories, you’ll need to utilize hybrid navigation which combines Top and Side navigation. On the top, you’ll use the following syntax:\nnavbar:\n  left:\n    text: \"Page group name\"\n    menu:\n      - path/to/page/group/landing.qmd\n      - path/to/page/group/1/landing.qmd\n      - path/to/page/group/2/landing.qmd\nThen, you’ll need to handle the rest in Side Navigation.\n\n\nSide Navigation\nFor some reason, Side Navigation in Quarto is much more robust and intuitive. That being said, by combining features here with the top bar, you can achieve a fairly dynamic navigation experience.\nThere are a few key differences. To start with, sidebar objects inherit properties from the first defined, so long as none are changed. Second, you’ll want to use an id with the top level landing pages, because this allows you to reference those in your top navigation bar (for more advanced integrations) using the address sidebar:id, although I struggled with this functionality and didn’t end up using it.\nThe general structure for your first page group is as follows.\nsidebar:\n    - id: guides\n      title: \"Guides\"\n      style: \"docked\"\n      background: dark\n      foreground: light\n      collapse-level: 2\n      contents:\n        - pages/guides/guides.qmd\nNow, if that’s where things end, you could just list pages on and on using the text: href: syntax. That being said, you probably are going to have a few subcategories, and possibly even further nested subcategories. To enable this, don’t use the text: syntax, instead use section:. This tells Quarto that you are defining a section, rather than just one single page. As you might guess, you can further nest sections, or specific pages, depending on your use of text: and section: with href:. See an example below.\n- id: projects\n      title: \"Projects\"\n      contents:\n        - pages/projects/projects.qmd\n        - section: \"Data Engineering and Architecture\"\n          href: pages/projects/data_engineering/data_engineering.qmd\n          contents:\n            - section: \"DataCamp Data Engineering Projects\"\n              href: pages/projects/data_engineering/datacamp/datacamp.qmd\n              contents:\n                - text: Bank Marketing ETL\n                  href: pages/projects/data_engineering/datacamp/bank_etl/bank_etl.qmd\n            - section: \"Data Engineering Research Projects\"\n              href: pages/projects/data_engineering/research/research.qmd\nFurthermore, it’s crucial, for nested subpages, to have the parent landing page’s .qmd file’s path as a standalone line in the contents of the _quarto.yml file. Failing to do so will remove the sidebar from the landing page’s navigation; however, for subsections, those should be specified within an href paramter, under the section line. Additionally, for the collapsable functionality to work consistently in a sidebar, you’ll need it docked. The behavior is inconsistent with floating sidebars. After you’ve set your default color values in _brand.yml, make sure to specify the design details at the top of your sidebar property.\n\n\n\nSharing Websites\nThere are two primary ways to publish your website once you’re done making edits, assuming you’re also using GitHub Pages.\n\nquarto render docs\nquarto publish docs\n\nFor simplicity, I chose to use quarto render docs (note that docs is used here because that’s the name of my main quarto project directory, not because it’s part of the command itself) because all I need to do is that and then push the changes. With quarto publish docs, it appeared to me that I would need to setup a branch for my git repository and possibly GitHub actions. I will probably do this in the future, for learning purposes, but didn’t want to for the sake of time.\nThat being said, the official documentation is very straightforward, and regardless of what you choose, there are two common steps:\n\ntouch .nojekyll\n\nThis tells GitHub pages not to do any additional processing of your website, include this in your docs directory\n\nIn a browser go to GitHubPagesRepo &gt; Settings &gt; Code and automation &gt; Pages\n\nThen, make sure Source is set to Deploy from a branch\nSet your branch to the quarto project directory, in your main project folder, docs in my case\n\n\nThen the classic:\n\ngit add docs\ngit commit -m \"Website updates.\"\ngit push",
    "crumbs": [
      "Quarto"
    ]
  },
  {
    "objectID": "pages/projects/projects.html",
    "href": "pages/projects/projects.html",
    "title": "Projects",
    "section": "",
    "text": "Landing page for the project portfolio portion of this website. Contains all of my public repositories and projects (for now, may include future consulting or paid side work, but I don’t do that at the moment), including both the code in repositories and write ups (where applicable).",
    "crumbs": [
      "Projects"
    ]
  },
  {
    "objectID": "pages/blogs/tech/tech.html",
    "href": "pages/blogs/tech/tech.html",
    "title": "Technology",
    "section": "",
    "text": "A landing page for my blogs (hosted on WhiteWind) about specific technologies. These may be quick notes, or longer demos.",
    "crumbs": [
      "Technology Blogs"
    ]
  },
  {
    "objectID": "pages/blogs/research/research.html",
    "href": "pages/blogs/research/research.html",
    "title": "Research",
    "section": "",
    "text": "A landing page for my general thoughts and research into what’s interesting me at the time.",
    "crumbs": [
      "Research Blogs"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chris Kornaros",
    "section": "",
    "text": "This is a Quarto website.\nTesting changes/additions.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "pages/blogs/blogs.html",
    "href": "pages/blogs/blogs.html",
    "title": "Blogs",
    "section": "",
    "text": "A landing page for various blogs, journals, or random thoughts. Some of these will be focused on specific tools or technology, others will be random thoughts or research notes.",
    "crumbs": [
      "Blogs"
    ]
  },
  {
    "objectID": "pages/about/about.html",
    "href": "pages/about/about.html",
    "title": "About",
    "section": "",
    "text": "About myself and this site in general.\n\n\nI’m a 26 year old Data Scientist, Engineer, Analyst, Architect, etc. that has two degrees from Tulane University in New Orleans– BSM, Marketing and Asian Studies; MS, Business Analytics. During COVID, I did an extra year of school and received a Masters in Data Science. As a result of my education, I fell in love with data science and machine learning, but due to common data challenges, I developed a professional passion and skillset for database architecture and data engineering.\n\n\n\nThis site is the personal portfolio and homepage for Chris Kornaros. I’m a Tulane Graduate and professional Data Engineer. On here, you’ll find projects and code samples that I can share publicly, guides for various tools or workflows, journal or blog posts, and any independent research or professional updates (including my resume)."
  },
  {
    "objectID": "pages/about/about.html#about-chris",
    "href": "pages/about/about.html#about-chris",
    "title": "About",
    "section": "",
    "text": "I’m a 26 year old Data Scientist, Engineer, Analyst, Architect, etc. that has two degrees from Tulane University in New Orleans– BSM, Marketing and Asian Studies; MS, Business Analytics. During COVID, I did an extra year of school and received a Masters in Data Science. As a result of my education, I fell in love with data science and machine learning, but due to common data challenges, I developed a professional passion and skillset for database architecture and data engineering."
  },
  {
    "objectID": "pages/about/about.html#about-this-website",
    "href": "pages/about/about.html#about-this-website",
    "title": "About",
    "section": "",
    "text": "This site is the personal portfolio and homepage for Chris Kornaros. I’m a Tulane Graduate and professional Data Engineer. On here, you’ll find projects and code samples that I can share publicly, guides for various tools or workflows, journal or blog posts, and any independent research or professional updates (including my resume)."
  },
  {
    "objectID": "pages/guides/guides.html",
    "href": "pages/guides/guides.html",
    "title": "Guides",
    "section": "",
    "text": "Welcome to the Guides section of the website! This is the landing page for step-by-step guides and instructions for various tools and workflows that I’ve used in the past or am currently exploring.\n\n\n\nPersonal Portfolio with Quarto and GitHub Pages\nUsing uv for Project Initialization\n\n\n\n\nHere are some topics I plan to cover in the future: - DuckDB - dbt - PostgreSQL - More to come!\nStay tuned for updates!",
    "crumbs": [
      "Guides"
    ]
  },
  {
    "objectID": "pages/guides/guides.html#current-guides",
    "href": "pages/guides/guides.html#current-guides",
    "title": "Guides",
    "section": "",
    "text": "Personal Portfolio with Quarto and GitHub Pages\nUsing uv for Project Initialization",
    "crumbs": [
      "Guides"
    ]
  },
  {
    "objectID": "pages/guides/guides.html#future-guides-planned",
    "href": "pages/guides/guides.html#future-guides-planned",
    "title": "Guides",
    "section": "",
    "text": "Here are some topics I plan to cover in the future: - DuckDB - dbt - PostgreSQL - More to come!\nStay tuned for updates!",
    "crumbs": [
      "Guides"
    ]
  },
  {
    "objectID": "pages/guides/quarto/quarto.html#conclusion",
    "href": "pages/guides/quarto/quarto.html#conclusion",
    "title": "Quarto",
    "section": "Conclusion",
    "text": "Conclusion\nNow, you’re all done with this guide, thank you for reading!\nCurrently, this is only updated to include my notes and thoughts from when I built my personal website. As I use Quarto to create a variety of document types, I will update this Guide with more. Follow me on Bluesky to stay connected with me and up to date with my work.",
    "crumbs": [
      "Quarto"
    ]
  }
]