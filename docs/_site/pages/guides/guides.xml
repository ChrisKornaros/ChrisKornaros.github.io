<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Chris Kornaros</title>
<link>https://chriskornaros.github.io/pages/guides/guides.html</link>
<atom:link href="https://chriskornaros.github.io/pages/guides/guides.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Fri, 13 Dec 2024 06:00:00 GMT</lastBuildDate>
<item>
  <title>uv, the Python Project and Package Manager</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/guides/posts/uv.html</link>
  <description><![CDATA[ 




<p>A basic guide on using <code>uv</code> the package and projects manager for Python developers.</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<div class="callout callout-style-default callout-tip callout-titled" title="VS Code Shortcuts">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
VS Code Shortcuts
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you‚Äôre using VS Code, here are some useful shortcuts. - Note, use CMD-K CMD-S to open the keyboard shortcuts. - <code>SHFT-CMD-i</code> inserts a code block</p>
</div>
</div>
<p><code>uv</code> is an Open Source project by <code>Astral</code>, the makers of <code>ruff</code>, that is self described (and worthy of the title) as <strong>an extremely fast Python package and project manager, written in Rust.</strong></p>
<blockquote class="blockquote">
<p>üöÄ A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.<br>
‚ö°Ô∏è 10-100x faster than pip.<br>
üêç Installs and manages Python versions.<br>
üõ†Ô∏è Runs and installs Python applications.<br>
‚ùáÔ∏è Runs scripts, with support for inline dependency metadata.<br>
üóÇÔ∏è Provides comprehensive project management, with a universal lockfile.<br>
üî© Includes a pip-compatible interface for a performance boost with a familiar CLI.<br>
üè¢ Supports Cargo-style workspaces for scalable projects.<br>
üíæ Disk-space efficient, with a global cache for dependency deduplication.<br>
‚è¨ Installable without Rust or Python via curl or pip.<br>
üñ•Ô∏è Supports macOS, Linux, and Windows.</p>
</blockquote>
<p>I‚Äôm only just beginning to learn and use the tool in my own projects (including converting my existing project environments to uv) and from what I‚Äôve seen it‚Äôs going to make life much easier. That being said, while you overwrite the muscle memory developed for years with <code>pip</code> and <code>venv</code>, there will be some growing pains; however, for those who are less familiar with what I‚Äôm talking about, I‚Äôll still explain some basic concepts and snags that I both run and ran into.</p>
</section>
<section id="basic-workflow-and-guide" class="level2">
<h2 class="anchored" data-anchor-id="basic-workflow-and-guide">Basic workflow and guide</h2>
<section id="sec-0-prereq" class="level3">
<h3 class="anchored" data-anchor-id="sec-0-prereq">Concepts to Know Before Getting Started</h3>
<ul>
<li>Basic knowledge of directories, bash (zsh in the case of MacOS), and using the CLI <a href="https://www.learnshell.org">bash</a></li>
<li>Basic knowledge of Python, common project structures, and simple workflows <a href="https://www.python.org/">Python</a></li>
<li>Basic knowledge of git (for local version control) and GitHub (for collaboration) <a href="https://docs.github.com/en/get-started/start-your-journey">git and GitHub basics</a></li>
</ul>
</section>
<section id="sec-1-init" class="level3">
<h3 class="anchored" data-anchor-id="sec-1-init">Initializing a Project</h3>
<section id="local-repository" class="level4">
<h4 class="anchored" data-anchor-id="local-repository">Local Repository</h4>
<p>The nice thing about <code>uv</code> is that it‚Äôs designed to make Python development easier, so there aren‚Äôt any head-scratching gotchas.</p>
<p>For the sake of this example and entire template, let‚Äôs assume I‚Äôm currently sitting in my <code>main</code> directory. For some that might be <code>home</code>, others <code>app</code>, for MacOS the default is <code>/usr/yourusername</code>, or maybe you prefer to put all projects in a <code>Documents</code> or <code>Projects</code> folder. Anyways, to start up a project you can do one of two things:</p>
<ol type="1">
<li>Have uv do everything, and then change directories
<ol type="1">
<li><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init uv_basic</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> uv_basic</span></code></pre></div></li>
</ol></li>
<li>Create the directory, change directories, and then have uv do everything
<ol type="1">
<li><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> uv_basic</span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> uv_basic</span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init</span></code></pre></div></li>
</ol></li>
</ol>
<p>This will create 4 files and initalize a local git repository:</p>
<ol type="1">
<li><code>.python-version</code></li>
<li><code>.pyproject.toml</code></li>
<li><code>hello.py</code></li>
<li><code>README.md</code></li>
<li><code>.git</code></li>
<li><code>.gitignore</code></li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
uv and the .gitignore file
</div>
</div>
<div class="callout-body-container callout-body">
<p>The nice thing about <code>uv</code> is that it autopopulates your <code>.gitignore</code> file with a few files and patterns, not to mention, it provides some basic tagging for what it puts in there. Just open the file (it‚Äôs plain text) to see. Since I‚Äôm saving my progress with this repo using git, I want to keep the overall file size down. So, I also included the <code>.html</code> and <code>.ipynb</code> file that Quarto generates because they can get large fast. Additionally, when you initialize your GitHub repo with the CLI‚Äôs repo creation process, I don‚Äôt include a README or .gitignore, because those are included in <code>uv init</code>.</p>
</div>
</div>
</section>
<section id="remote-repository" class="level4">
<h4 class="anchored" data-anchor-id="remote-repository">Remote Repository</h4>
<p>For anyone familiar with software development you‚Äôve probably heard of GitHub or GitLab. I‚Äôm more familiar, professionally and personally, with GitHub (which is what I‚Äôll be using in this example); however, there are a large amount of people that prefer GitLab because it is better for some enterprise and personal use cases‚Äì <a href="https://prismic.io/blog/gitlab-vs-github">GitHub vs.&nbsp;GitLab</a>. For this, you‚Äôll want to install the <a href="https://cli.github.com">GitHub CLI</a>. Then, you can follow along.</p>
<ol type="1">
<li>Verify the installations and make sure to get your credentials setup, in git
<ol type="1">
<li><code>which gh</code> and <code>which git</code></li>
</ol></li>
<li>Add your name and email
<ol type="1">
<li><code>git config --global user.name "Your Name"</code></li>
<li><code>git config --global user.email "your-email@example.com"</code></li>
</ol></li>
<li>Authenticate access to GitHub
<ol type="1">
<li><code>gh auth login</code></li>
<li>Using the CLI option, follow the instructions</li>
<li>Select <code>HTTPS</code> for the easier connection option</li>
</ol></li>
<li>Verify you have proper access to your GitHub
<ol type="1">
<li><code>gh auth status</code></li>
</ol></li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">github.com</span></span>
<span id="cb3-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚úì</span> Logged in to github.com account itsmeChis <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">keyring</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb3-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Active account: true</span>
<span id="cb3-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Git operations protocol: https</span>
<span id="cb3-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Token: gho_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">************************************</span></span>
<span id="cb3-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Token scopes: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'delete_repo'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gist'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'read:org'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repo'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'workflow'</span></span></code></pre></div>
<ol type="1">
<li><code>gh repo list</code></li>
<li>Assuming you haven‚Äôt, create your project repo from the CLI (you can also do so using the GitHub.com GUI, but I prefer this way to reinforce my learning)
<ol type="1">
<li><code>gh repo create</code></li>
<li><code>Create a new repository from scratch</code></li>
<li><code>uv basic</code></li>
<li><em>optional description</em></li>
<li><code>Public</code></li>
<li><code>GNU Affero General Public License v3.0</code> <a href="https://choosealicense.com">Which license do you need?</a> <img src="https://chriskornaros.github.io/pages/guides/posts/images/gh_cli_repo_setup.png" class="img-fluid" alt="GitHub CLI Repo Creation"></li>
</ol></li>
<li>Set the newly created repo as the local git repo‚Äôs upstream
<ol type="1">
<li>This will result in an error (<code>git pull</code>)</li>
<li>Set the global config to merge <a href="https://git-scm.com/docs/git-pull">git pull</a></li>
<li>git pull with a commit message</li>
<li>git status to verify</li>
<li>git push</li>
</ol></li>
</ol>
</section>
</section>
<section id="sec-2-dep" class="level3">
<h3 class="anchored" data-anchor-id="sec-2-dep">Adding and managing dependencies</h3>
<p>Thus far, the workflow with uv isn‚Äôt too dissimilar from using pip and venv, but managing dependencies and testing scripts is where uv shines. As you‚Äôll see below, with pip and venv, you have to manually create the virtual environment, activate it, install dependencies, manage requirements files, and then run your script. With uv, however, almost all of that is done automatically and things like uv pip list or uv venv are only there for backwards compatibility. A lot of the tedious pieces of the DevOps workflow are now obsolete or handled in the background.</p>
<section id="using-pip-and-venv" class="level4">
<h4 class="anchored" data-anchor-id="using-pip-and-venv">Using pip and venv</h4>
<p>When using a combination of pip and venv, your typical workflow is straightforward, but becomes complicated if you need to uninstall certain packages or make quick, iterative tests of code.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> uv_basic</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> uv_basic</span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb4-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb4-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install duckdb</span>
<span id="cb4-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install numpy</span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span>
<span id="cb4-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> script.py</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Realize you don't need numpy, so you want to uninstall it and keep your environment cleaner</span></span>
<span id="cb4-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">deactivate</span></span>
<span id="cb4-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> .venv</span>
<span id="cb4-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> venv .venv</span>
<span id="cb4-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Two options here, delete numpy from requirements.txt, not scalable with many packages, or reinstall just duckdb, also not scaleable</span></span>
<span id="cb4-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install duckdb</span>
<span id="cb4-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> freeze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> requirements.txt</span>
<span id="cb4-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> script.py</span></code></pre></div>
<p>As you can see, the initial workflow isn‚Äôt horrible, but if you need to make a change to the environment or just want to test something small, the number of steps quickly multiplies.</p>
</section>
<section id="using-uv" class="level4">
<h4 class="anchored" data-anchor-id="using-uv">Using uv</h4>
<p>Compare that with the streamlined uv workflow.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> init uv_basic</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> uv_basic</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add duckdb</span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> add numpy</span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run script.py</span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> remove numpy</span>
<span id="cb5-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run script.py</span></code></pre></div>
<p>The workflow improvements and efficiency should be obvious. The nice thing is that uv functions as your standalone virtual environment, without the need for activation or deactivation. Using <code>uv add</code> will add a dependency to both your <code>pyproject.toml</code> file and your <code>uv.lock</code> file. Additionally, if you are more familiar with verifying using pip, running <code>uv pip list</code> will show that the package is there (although the pip functionality is obsolete and only for backwards compatibility at this point). If you want to remove a package, simply use <code>uv remove</code> and that will also remove it from the .toml and .lock files. The last feature you‚Äôll need to understand (to use uv at a basic level) is <code>uv sync</code>. Simply put, it syncs your environment with the project‚Äôs dependencies/lock file. This ensures that the exact versions specified in your lockfile are used in your environment‚Äì dependencies may be added, removed, or updated if there are updates to the declared dependencies.</p>
<p>To cap this off, here are some common use cases for <code>uv sync</code>: - Run uv sync (without ‚Äìfrozen) to keep dependencies up-to-date and to resolve changes. - Use uv sync ‚Äìfrozen to validate dependencies without altering them</p>
</section>
</section>
<section id="sec-3-convert" class="level3">
<h3 class="anchored" data-anchor-id="sec-3-convert">Converting your Legacy Projects to uv</h3>
<p>Now that you‚Äôve seen the benefits of uv, as well as the workflow differences, you probably want to give it a try or even convert entire projects to uv. The good news is that this is simple and only requires a few modifications to get things up and running. The general workflow is the same as I outlined above, you‚Äôll just be cleaning up your local environment and reinstalling things along the way. The project I converted to use <code>uv</code> for this example utilizes <code>DuckDB</code> and <code>dbt</code> for the database and data modeling/ETL. I‚Äôll include some dbt specific information, for example if you move your database file from a subdirectory to the main one, remember to update your dbt profiles in your global dbt location.</p>
<ol type="1">
<li>Change directories to your specific project directory</li>
<li>Run <code>uv init</code>, it will create any file or folder that isn‚Äôt currently in the main folder
<ul>
<li>If you already have a <code>.git</code> folder and commit history, <code>uv</code> will <strong>not</strong> delete or overwrite the original folder.</li>
</ul></li>
<li>Add all of the dependencies you need, then remove your requirements file (it‚Äôs no longer needed)
<ul>
<li>As of writing this, I wasn‚Äôt sure how to use <code>uv add</code> with the legacy requirements file, <code>uv pip install -r</code> kind of worked, but didn‚Äôt actually add the dependencies to the .toml or .lock files</li>
<li>There must be an easier way to bulk add dependencies, but I manually did it</li>
<li>In my case, I had to remember to add <strong><em>both</em></strong> <code>dbt</code> and <code>dbt-duckdb</code>, so the adapter would work</li>
</ul></li>
<li>Install all of the CLI tools that you need, and don‚Äôt want or use globally
<ul>
<li>In my case, I need <code>jupyter</code>, <code>quarto</code>, and <code>dbt</code>, but I also have the latter two installed globally</li>
</ul></li>
<li>Verify that uv can run things correctly
<ul>
<li>I first used <code>uv run hello.py</code> to verify that the basic functionality is there</li>
<li>Then, I ran a more complex script, that imports and uses duckdb, to ensure the packages are installing and running as intended</li>
<li>Then, I used <code>uv tool list</code> to verify which CLI tools are installed</li>
<li>Finally, I verified that the CLI tools work, by using <code>uv run dbt run --select transform</code> to test dbt model functionality in uv</li>
</ul></li>
</ol>
</section>
<section id="sec-4-final" class="level3">
<h3 class="anchored" data-anchor-id="sec-4-final">Final Thoughts</h3>
<p>So that‚Äôs it! Overall, uv is incredibly easy to setup and configure because it builds on the classic workflows, while simplifying or abstracting some of the process. You also saw how easy it is to start using uv with older projects that use the legacy workflow. At the time of writing this, I‚Äôve only been using <code>uv</code> for a few days, so I‚Äôm sure there are things I got wrong or missed, please comment to let me know!</p>
<p>I‚Äôm happy to chat and love learning about data, as well as what folks in this space are working on. Connect with me on <a href="https://bsky.app/profile/chriskornaros.bsky.social">Bluesky</a> <code>@chriskornaros.bsky.social</code> to follow along with what I‚Äôm working on, learning, or just to say hi! Below are some other notes and thoughts I had while working on this write up.</p>
<section id="general-notes" class="level4">
<h4 class="anchored" data-anchor-id="general-notes">General Notes</h4>
<ul>
<li>It seems that while tools are specific to a uv project instance (i.e.&nbsp;uv_basic returns the .venv dir when asking which jupyter, but test before intalling anything say it can‚Äôt be found), when you use uv tool install it installs it to the system wide uv</li>
<li><code>uv pip list</code> defaults to the global (non-uv or non-pip) python environment (in my case it‚Äôs pip and wheel), but once you install something (using add, pip install, etc.) it switches the context to the current parent uv dir (i.e.&nbsp;test, instead of uv_basic)
<ul>
<li>Tools are still listed even after this</li>
</ul></li>
<li><code>uv tool install</code> only works when installing python package specific tools, but DuckDB for Python (for example) doesn‚Äôt come packaged with the DuckDB CLI tools, so <code>uv tool install duckdb</code> won‚Äôt install the DuckDB CLI features</li>
<li>It seems that saving variable with duckdb.sql(‚Ä¶).show() and then printing the type of that, just prints the query output, insteaed of the type</li>
<li>Based on tests, the workflow changes are as follows</li>
</ul>


</section>
</section>
</section>

 ]]></description>
  <category>DevOps</category>
  <guid>https://chriskornaros.github.io/pages/guides/posts/uv.html</guid>
  <pubDate>Fri, 13 Dec 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Quarto</title>
  <dc:creator>Chris Kornaros</dc:creator>
  <link>https://chriskornaros.github.io/pages/guides/posts/quarto.html</link>
  <description><![CDATA[ 




<p>A non-exhaustive guide on using Quarto for project documentation and personal branding.</p>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p><a href="https://www.quarto.org/">Quarto</a> is:<br>
</p>
<blockquote class="blockquote">
<p>An open-source scientific and technical publishing system<br>
Author using Jupyter notebooks or with plain text markdown in your favorite editor.<br>
Create dynamic content with Python, R, Julia, and Observable.<br>
Publish reproducible, production quality articles, presentations, dashboards, websites, blogs, and books in HTML, PDF, MS Word ePub, and more.<br>
Share knowledge and insights organization-wide by publishing to Posit Connect, Confluence, or other publishing systems.<br>
Write using Pandoc markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.</p>
</blockquote>
<section id="downloading-and-updating" class="level3">
<h3 class="anchored" data-anchor-id="downloading-and-updating">Downloading and Updating</h3>
<p>For simple instructions and a download/install guide using a GUI, visit <a href="https://quarto.org/docs/get-started/">Quarto - Get Started</a>.</p>
<p>For MacOS users, I recommend downloading and learning about Homebrew, the package manager. It drastically simplifies all phases of package management. To install, simply use <code>brew install quarto</code> and you‚Äôre done.</p>
</section>
</section>
<section id="projects" class="level2">
<h2 class="anchored" data-anchor-id="projects">Projects</h2>
<p>This section, and the rest of the guide, assume you‚Äôre familiar with and using the uv package and project manager for Python, git for version control, and the GitHub CLI for collaboration. I‚Äôll be referencing all of these tools throughout the rest of the guide. You can read my guide to learn more about <a href="https://chriskornaros.github.io/pages/guides/uv/uv.html">uv</a></p>
<section id="general-workflow" class="level3">
<h3 class="anchored" data-anchor-id="general-workflow">General Workflow</h3>
<p>I‚Äôll be walking through the general workflow, but here‚Äôs a quick note about how I use Quarto for Data related projects. I use GitHub as my collaboration/repo hosting tool, so all of my projects have a <code>README.md</code> file. That way, if anyone visits the actual repo, they can view a nicely rendered markdown file, but when I‚Äôm ready to add a project to my website, I‚Äôll copy the contents into a <code>.qmd</code> file. Then, I can add the Quarto specific formatting.</p>
<p>This simplifies my general workflow a lot, and makes it easy to formally share and document my research.</p>
</section>
<section id="initializing-a-project" class="level3">
<h3 class="anchored" data-anchor-id="initializing-a-project">Initializing a Project</h3>
<section id="the-create-command" class="level4">
<h4 class="anchored" data-anchor-id="the-create-command">The create command</h4>
<p>I‚Äôm going to assume you‚Äôve already run the <code>uv init</code> command to initalize your <code>uv</code> project. From there, it‚Äôs easy to start a project with Quarto from the command line, and there are a few built-in project types to further simplify the startup process. Furthermore, Quarto provides a simple command for creating (or initializing) a project (or extension), <code>quarto create project</code>, and a handy setup guide to help you use it. The following code shows you my terminal input and outputs.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">chriskornaros@chriss-air</span> test % quarto create project</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> Type ‚Ä∫ default</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> Directory ‚Ä∫ docs</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> Title <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">‚Ä∫</span> test_docs</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Creating</span> project at /Users/chriskornaros/Documents/test/docs:</span>
<span id="cb1-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Created _quarto.yml</span>
<span id="cb1-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Created .gitignore</span>
<span id="cb1-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> Created test_docs.qmd</span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">?</span> Open With ‚Ä∫ <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">don</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t open)</span></span></code></pre></div>
<p>For a quick run through: quarto create project initializes a quarto project directory within your current working directory (the uv parent directory), <code>type</code> lets you choose the type of Quarto documentation (book, website, confluence, etc.), title is the title of your homepage (<code>.qmd</code>) file. Personally, I like to remove the <code>docs/.gitignore</code> file because uv creates one when you initialize a project, in the parent directory. So, having just one <code>.gitignore</code> file helps me keep track of things more easily.</p>
<p>The only directories I added to <code>docs</code> after it was created by quarto, was a <code>pages</code> directory for various subpages and a <code>brand</code> directory for <code>.scss</code> files, images, etc. For project, blog, or guide specific media files, I kept those within their subpage folder. Here, I keep the various landing pages and their sub directory structures. Ideally, I won‚Äôt have any files in there, but the <code>_quarto.yml</code> file will point to their locations in my personal GitHub repo.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="File Context in Quarto">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
File Context in Quarto
</div>
</div>
<div class="callout-body-container callout-body">
<p>In my time developing this site, it seems that Quarto can only pickup on files within the context of the <code>docs</code> (or whatever you name your Quarto project) folder. Furthermore, it struggels with absolute context paths, and at most I could get it to work with <code>../../file</code>.</p>
</div>
</div>
</section>
</section>
<section id="working-on-your-project" class="level3">
<h3 class="anchored" data-anchor-id="working-on-your-project">Working on your Project</h3>
<p>Now that you‚Äôve initalized your project directory, you can begin work! Head over to <a href="https://quarto.org/docs/authoring/markdown-basics.html">Quarto Basics</a> for documentation on the basics of <code>.qmd</code> files and authoring with Quarto markdown.</p>
<p>Just remember, every webpage will need a <code>.qmd</code> file!</p>
</section>
<section id="rendering-a-projects" class="level3">
<h3 class="anchored" data-anchor-id="rendering-a-projects">Rendering a Projects</h3>
<p>This part is blank for now. Rendering websites have some specific components to websites and GitHub pages, that are covered later on. I will update this for other document types in the future.</p>
</section>
</section>
<section id="configurations" class="level2">
<h2 class="anchored" data-anchor-id="configurations">Configurations</h2>
<section id="the-_quarto.yml-file" class="level3">
<h3 class="anchored" data-anchor-id="the-_quarto.yml-file">The _quarto.yml file</h3>
<p>This YAML file serves as the primary configuration file for your Quarto project. Similar to other Quarto YAML files, this handles document configurations, but adds the Quarto project features to sync those across documents and for more environment control. You have the ability to define project metadata for all of the different document types. In this example, I used it to define the website configurations, but if you‚Äôre working on a book or dashboard, then it could be used to normalize chapters or visuals as well.</p>
<p>You can also specify the formatting, which connects with the <code>_brand.yml</code> file and enables cross referencing of variables and values. Learn more with <a href="https://quarto.org/docs/projects/quarto-projects.html">Quarto Projects</a>.</p>
</section>
<section id="the-_brand.yml-file" class="level3">
<h3 class="anchored" data-anchor-id="the-_brand.yml-file">The _brand.yml File</h3>
<p>This is a new feature with Quarto 1.6 that allows you to define and save your design specifications in a YAML file. While this file is specific to your Quarto project directories, you can store and share the file across projects or with others to maintain brand consistency. Luckily, there is great documentation if you want more details <a href="https://posit-dev.github.io/brand-yml/brand/">brand.yml</a>. While there is a lot to cover, I‚Äôll go over some basics to get started. It‚Äôs important to remember that if you specify colors for anything within <code>.qmd</code> files, those will overwrite the defaults in the brand file. Furthermore, Quarto and <code>_brand.yml</code> both utilize the <code>Bootstrap</code> web development framework. For a list of its full default values, visit the <a href="https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss">repo</a>.</p>
<section id="color" class="level4">
<h4 class="anchored" data-anchor-id="color">Color</h4>
<p>This is obviously an important part of all branding. There are two main components:</p>
<ol type="1">
<li><code>palette</code></li>
<li><code>theme colors</code></li>
</ol>
<p>Palette lets you specify hexcodes and assign those to various strings. Those string values could be generic terms, like <em>green</em> (if there is a specific shade you would like), or terms specific to <code>brand.yml's</code> <em>theme colors</em>. When you set your default colors in this way, you can then customize the output in the <code>_quarto.yml</code> file. To modify, for example, your navigation bar, just define the background and foreground properties under the <code>navbar</code> property.</p>
<p>Another thing to keep in mind with color, just because it‚Äôs available in <code>_brand.yml</code>, like <code>tertiary</code>, doesn‚Äôt mean it‚Äôs defined and functional in the <code>_quarto.yml</code> file. So, you may need to be creative with how you use protected terms, like success, danger, or warning. Doing so allows you to take advantage of the programmatic benefits of the brand file, while specifying several, possibly, similar shades that would be tricky to do just be renaming colors, such as red, blue, or yellow.</p>
<p>If you aren‚Äôt sure on what colors or palettes to choose, using an LLM based chatbot can be helpful. This allows you to describe the colors and themes you‚Äôre going for, as well as refine them over time.</p>
</section>
<section id="typography" class="level4">
<h4 class="anchored" data-anchor-id="typography">Typography</h4>
<p>This section lets you control which font families are included in your Quarto project. Then, you can specify where various fonts are used and for some properties, even change their specific color. As a heads up, the <code>_brand.yml</code> documentation seems to be correct and updated; however, <code>bash</code> code blocks don‚Äôt render the monospace-background the same way. So, while in-line monospace backgrounds and monospace backgrounds for Python (at the very least) will be colored as the documentation says. Bash code blocks will have no background, just the code itself in the specified font color.</p>
</section>
<section id="defaults" class="level4">
<h4 class="anchored" data-anchor-id="defaults">Defaults</h4>
<p>This section gives you more control over various defaults, for HTML Bootstrap, Quarto, Shiny, etc. When configuring specific design colors, using the bootstrap default section will allow you to keep your Quarto files simple, while providing a high level of control over design.</p>
</section>
<section id="sass---syntactically-awesome-style-sheets" class="level4">
<h4 class="anchored" data-anchor-id="sass---syntactically-awesome-style-sheets">SASS - Syntactically Awesome Style Sheets</h4>
<p>Remember, whatever you can‚Äôt configure simply in your <code>_brand.yml</code> file, you can do so in a <code>.scss</code> file. For example, if you want to create custom light and dark mode themes, just create <code>.scss</code> files with the appropriate code and place this in your docs (main Quarto project) directory. Below is an example of a dark mode theme. I set the default values for the scss bootstrap variables at the top. Then, I specified the specific rules for various parts of the page. For defined variables, blockquote, you don‚Äôt need a <code>.</code>, but for features specific to quarto rendered sites, add a . before. For example, to modify the look of code blocks, you must use the <code>.sourceCode</code> variable. For child classes, for example the <code>.sourceCode css copy-with-code</code> class, if you want to modify that you‚Äôll need to use <code>.sourceCode pre.copy-with-code</code>. To find out the name of a variable you don‚Äôt know, just inspect the specific element on the webpage, and the class name will translate 1:1 with the variable name. Additionally, for any property that you need to specifically update, you can add the <code>!important</code> tag, which means it will override existing rules, but be careful using this.</p>
<p>For a list of all CSS variable properties, visit <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Reference">CSS Web Docs</a>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*-- scss:defaults --*/</span></span>
<span id="cb2-2">$background<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#2E4053</span>;</span>
<span id="cb2-3">$foreground<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#F7F7F7</span>;</span>
<span id="cb2-4">$primary<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#FF9900</span>;</span>
<span id="cb2-5">$secondary<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#56B3FA</span>;</span>
<span id="cb2-6">$tertiary<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#655D4B</span>;</span>
<span id="cb2-7">$light<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#F7F7F7</span>;</span>
<span id="cb2-8">$dark<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#1C1F24</span>;</span>
<span id="cb2-9">$success<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#33373D</span>;</span>
<span id="cb2-10">$danger<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#1A1D23</span>;</span>
<span id="cb2-11">$info<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#56B3FA</span>;</span>
<span id="cb2-12">$warning<span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#FF7575</span>;</span>
<span id="cb2-13"></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*-- scss:rules --*/</span></span>
<span id="cb2-16">body {</span>
<span id="cb2-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-family</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Open Sans'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">sans-serif</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">background</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-19">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">foreground</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-20">}</span>
<span id="cb2-21"></span>
<span id="cb2-22">h1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h3 {</span>
<span id="cb2-23">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">danger</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-24">}</span>
<span id="cb2-25"></span>
<span id="cb2-26">h4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h5<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h6 {</span>
<span id="cb2-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">danger</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-28">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">font-weight</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bold</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-29">}</span>
<span id="cb2-30"></span>
<span id="cb2-31">blockquote {</span>
<span id="cb2-32">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#2E6490</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* added background color */</span></span>
<span id="cb2-33">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">border-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dark</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-34">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">danger </span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">!important</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-35">}</span>
<span id="cb2-36"></span>
<span id="cb2-37">code {</span>
<span id="cb2-38">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-39">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">info</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-40">}</span>
<span id="cb2-41"></span>
<span id="cb2-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> {</span>
<span id="cb2-43">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">background-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">success</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-44">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">info</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-45">}</span>
<span id="cb2-46"></span>
<span id="cb2-47"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.sourceCode</span> pre<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.code-with-copy</span>{</span>
<span id="cb2-48">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">padding</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-49">}</span>
<span id="cb2-50"></span>
<span id="cb2-51"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout-title-container.flex-fill</span> {</span>
<span id="cb2-52">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> $<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">danger</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-53">}</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled" title="CSS Variable Names">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
CSS Variable Names
</div>
</div>
<div class="callout-body-container callout-body">
<p>There are some weird naming convention differences between <code>_brand.yml</code> and Quarto. The big one is monotone being used to reference block quotes, code blocks, and in-line code in _brand, but in Quarto it renders the in-line code as <code>code</code> and the code blocks as <code>sourceCode</code>. Make sure to use inspect element to be sure on what you‚Äôre changing. CSS class names can get long, especially when referncing nested classes, just experiment and take your time with things.</p>
</div>
</div>
</section>
</section>
</section>
<section id="websites" class="level2">
<h2 class="anchored" data-anchor-id="websites">Websites</h2>
<p>Websites really stretch and push the boundaries of what you can accomplish with Quarto. In this section, I‚Äôll walk through a few key points of developing them.</p>
<section id="blogs" class="level3">
<h3 class="anchored" data-anchor-id="blogs">Blogs</h3>
<p>Blogs are a special kind of Quarto website that consists of a collection of posts along with a navigational page that lists them in reverse chronological order. Pretty much all of the information you‚Äôll need about blogs is the same as the parts of this guide covering websites. Just know, it‚Äôs easy to integrate a blog as a subpage of a larger website.</p>
<p>Simply add the blogs project structure as a subdirectory of <code>pages/</code>. To keep track of things, I made the title of the main blog page <code>blogs.qmd</code>, so it doesn‚Äôt conflict with the <code>index.qmd</code> that is the home page of my whole website. Then, I added post categories within the <code>posts/</code> directory of the Quarto <code>blogs/</code> directory.</p>
<p>That being said, and I‚Äôm not quite sure why, but the <code>_metadata.yml</code> file</p>
</section>
<section id="rendering-websites" class="level3">
<h3 class="anchored" data-anchor-id="rendering-websites">Rendering Websites</h3>
<p>I run the following code block from my main project directory. My Quarto project directory is a folder called docs. So, I specify to Quarto that I want to render the entire Quarto project <code>docs</code>, but <code>quarto render</code>‚Äôs context is specific to the <em>quarto project</em> directory. Therefore, I need to use the <code>.</code> to specify that I want the rendered <code>.html</code> files put in the Quarto project folder, and sub folder.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> render docs <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output-dir</span> .</span></code></pre></div>
<p>Conversely, you can specify, within the <code>output</code> property of your <code>_quarto.yml</code> file that <code>output-dir: .</code></p>
<p>This is also the same syntax when previewing your website, using <code>quarto preview docs</code>, the difference is there is no need to specify an output directory. What this does is spin up a jupyter kernel to render your <code>.qmd</code> files, then, it displays the output in a browser. When you hit save on your <code>_quarto.yml</code>, <code>.scss</code>, and <code>.qmd</code> files then the site will automatically update (it doesn‚Äôt for <code>_brand.yml</code> saves).</p>
<p>Once you‚Äôve rendered your website, and pushed the commit, the change is reflected in a few mintues.</p>
<div class="callout callout-style-default callout-note callout-titled" title="quarto preview with uv">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
quarto preview with uv
</div>
</div>
<div class="callout-body-container callout-body">
<p>The ease of using <code>quarto preview</code> is magnified when using <code>uv</code> as your project/package manager. Instead of having to manage various virtual environments and packages, as well as activation and deactivation, <code>uv</code> does it all. Even VS Code picks up on the context <code>uv</code> provides. The terminal will automatically realize you‚Äôre in a <code>uv</code> environment and display output as if you were using a virutal environment (even though you haven‚Äôt activated it).</p>
</div>
</div>
</section>
<section id="website-navigation" class="level3">
<h3 class="anchored" data-anchor-id="website-navigation">Website Navigation</h3>
<section id="top-navigation" class="level4">
<h4 class="anchored" data-anchor-id="top-navigation">Top Navigation</h4>
<p>After you‚Äôve set your default color values in <code>_brand.yml</code>, make sure to specify the design details at the top of your <code>navbar</code> property. This is useful, even when using <code>.scss</code> files for more specific design control because you can utilize those variables in your light and dark themes.</p>
<p>For pages on your top navigation bar that just have a landing page, simple use the following syntax</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Page name"</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> path/to/page/file.qmd</span></span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled" title="Dashes and Intentation Matter in YAML">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Dashes and Intentation Matter in YAML
</div>
</div>
<div class="callout-body-container callout-body">
<p>Notice when I‚Äôm using a <code>-</code> and not. This is deliberate. In my development, I realized that where you use and specify the dash can affect functionality. Some places require it, some don‚Äôt, and it may depend on the order of various parameters.</p>
</div>
</div>
<p>For page categories that may have several landing pages, or even subcategories, you‚Äôll need to utilize hybrid navigation which combines Top and Side navigation. On the top, you‚Äôll use the following syntax:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Page group name"</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">menu</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> path/to/page/group/landing.qmd</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> path/to/page/group/1/landing.qmd</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> path/to/page/group/2/landing.qmd</span></span></code></pre></div>
<p>Then, you‚Äôll need to handle the rest in Side Navigation; however, it isn‚Äôt perfect. You can‚Äôt have nested drop down options in your top navigation bar, so the best I came up with was having a landing page for the top level and first tier subcategories, then handled the rest on the sidebar (which only pops up on affiliated pages).</p>
</section>
<section id="side-navigation" class="level4">
<h4 class="anchored" data-anchor-id="side-navigation">Side Navigation</h4>
<p>For some reason, Side Navigation in Quarto is much more robust and intuitive. That being said, by combining features here with the top bar, you can achieve a fairly dynamic navigation experience.</p>
<p>There are a few key differences. To start with, sidebar objects inherit properties from the first defined, so long as none are changed. Second, you‚Äôll want to use an <code>id</code> with the top level landing pages, because this allows you to reference those in your top navigation bar (for more advanced integrations) using the address <code>sidebar:id</code>, although I struggled with this functionality and didn‚Äôt end up using it.</p>
<p>The general structure for your first page group is as follows.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sidebar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> guides</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Guides"</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"docked"</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">background</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> dark</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreground</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> light</span></span>
<span id="cb6-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collapse-level</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">section</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Guides"</span></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/guides/guides.qmd</span></span>
<span id="cb6-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span></code></pre></div>
<p>Now, if that‚Äôs where things end, you could just list pages on and on using the <code>text: href:</code> syntax. That being said, you probably are going to have a few subcategories, and possibly even further nested subcategories. To enable this, don‚Äôt use the <code>text:</code> syntax, instead use <code>section:</code>. This tells Quarto that you are defining a section, rather than just one single page. As you might guess, you can further nest sections, or specific pages, depending on your use of <code>text:</code> and <code>section:</code> with <code>href:</code>. See an example below.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> projects</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Projects"</span></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb7-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/projects/projects.qmd</span></span>
<span id="cb7-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">section</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data Engineering and Architecture"</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/projects/data_engineering/data_engineering.qmd</span></span>
<span id="cb7-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contents</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb7-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bank Marketing ETL"</span></span>
<span id="cb7-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/projects/data_engineering/posts/bank_etl.qmd</span></span>
<span id="cb7-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Open Source Data and Analytics Architecture"</span></span>
<span id="cb7-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/projects/data_engineering/posts/oss_data_arch.qmd</span></span>
<span id="cb7-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Basic Open Source Architecture"</span></span>
<span id="cb7-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">              </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pages/projects/data_engineering/posts/basic_oss.qmd</span></span></code></pre></div>
<p>For subsections, the landing page‚Äôs <code>.qmd</code> file should be specified within an href paramter, under the section line. Additionally, for the collapsable functionality to work consistently in a sidebar, you‚Äôll need it docked. The behavior is inconsistent with floating sidebars. After you‚Äôve set your default color values in <code>_brand.yml</code>, make sure to specify the design details at the top of your <code>sidebar</code> property. Having a section provides the dropdown functionality on your sidebar.</p>
</section>
</section>
<section id="sharing-websites" class="level3">
<h3 class="anchored" data-anchor-id="sharing-websites">Sharing Websites</h3>
<p>There are two primary ways to publish your website once you‚Äôre done making edits, assuming you‚Äôre also using GitHub Pages.</p>
<ol type="1">
<li><code>quarto render docs</code></li>
<li><code>quarto publish docs</code></li>
</ol>
<p>For simplicity, I chose to use <code>quarto render docs</code> (note that docs is used here because that‚Äôs the name of my main quarto project directory, not because it‚Äôs part of the command itself) because all I need to do is that and then push the changes. With <code>quarto publish docs</code>, it appeared to me that I would need to setup a branch for my git repository and possibly GitHub actions. I will probably do this in the future, for learning purposes, but didn‚Äôt want to for the sake of time.</p>
<p>That being said, the official <a href="https://quarto.org/docs/publishing/github-pages.html">documentation</a> is very straightforward, and regardless of what you choose, there are two common steps:</p>
<ol type="1">
<li><code>touch .nojekyll</code>
<ul>
<li>This tells GitHub pages not to do any additional processing of your website, include this in your <code>docs</code> directory</li>
</ul></li>
<li>In a browser go to <code>GitHubPagesRepo &gt; Settings &gt; Code and automation &gt; Pages</code>
<ul>
<li>Then, make sure <code>Source</code> is set to <code>Deploy from a branch</code></li>
<li>Set your branch to the quarto project directory, in your main project folder, <code>docs</code> in my case</li>
</ul></li>
</ol>
<p>Then the classic:</p>
<ul>
<li><code>git add docs</code></li>
<li><code>git commit -m "Website updates."</code></li>
<li><code>git push</code></li>
</ul>
</section>
</section>
<section id="other-notes" class="level2">
<h2 class="anchored" data-anchor-id="other-notes">Other Notes</h2>
<p>I‚Äôll update this section with more notes and tips that come to mind as I finish building out the site, version 1.0. Then, I‚Äôll reorganize what goes here into the proper places on the document.</p>
<ol type="1">
<li>If you want to use past <code>.ipynb</code> files as documentation, or add longer write ups to those files, there is a <code>jupyter</code> command
<ol type="1">
<li><code>jupyter nbconvert file.ipynb --to markdown --output file.md</code></li>
<li><code>mv file.md &gt; file.qmd</code></li>
<li>Done! Just make any quarto specific modifications that you need</li>
</ol></li>
</ol>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Now, you‚Äôre all done with this guide, thank you for reading!</p>
<p>Currently, this is only updated to include my notes and thoughts from when I built my personal website. As I use Quarto to create a variety of document types, I will update this Guide with more. Follow me on <a href="https://bsky.app/profile/chriskornaros.bsky.social">Bluesky</a> to stay connected with me and up to date with my work.</p>


</section>

 ]]></description>
  <category>Reporting</category>
  <guid>https://chriskornaros.github.io/pages/guides/posts/quarto.html</guid>
  <pubDate>Fri, 13 Dec 2024 06:00:00 GMT</pubDate>
</item>
</channel>
</rss>
